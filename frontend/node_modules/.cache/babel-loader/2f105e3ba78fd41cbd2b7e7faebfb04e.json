{"ast":null,"code":"var _CreatePostMutation;\n\nimport { commitMutation, graphql } from 'react-relay';\nimport { ConnectionHandler } from 'relay-runtime';\nimport environment from '../Environment';\nlet tempID = 0;\nconst mutation = _CreatePostMutation !== void 0 ? _CreatePostMutation : (_CreatePostMutation = require(\"./__generated__/CreatePostMutation.graphql\"), _CreatePostMutation.hash && _CreatePostMutation.hash !== \"fbb700455360e65bfdd95ccadb40de00\" && console.error(\"The definition of 'CreatePostMutation' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.\"), _CreatePostMutation);\nexport default ((title, content, userId, viewerId, callback) => {\n  const variables = {\n    input: {\n      title,\n      content,\n      userId,\n      clientMutationId: \"\"\n    }\n  };\n  commitMutation(environment, {\n    mutation,\n    variables,\n    optimisticUpdater: proxyStore => {\n      const id = \"client:newPost:\" + tempID++;\n      const newPost = proxyStore.create(id, \"Post\");\n      newPost.setValue(id, \"id\");\n      newPost.setValue(title, \"title\");\n      newPost.setValue(content, \"content\");\n      const viewerProxy = proxyStore.get(viewerId);\n      const connection = ConnectionHandler.getConnection(viewerProxy, \"ListPage_allPosts\");\n\n      if (connection) {\n        ConnectionHandler.insertEdgeAfter(connection, newPost);\n      }\n    },\n    updater: proxyStore => {\n      const createPostField = proxyStore.getRootField(\"createPost\");\n      const newPost = createPostField.getLinkedRecord(\"post\");\n      const viewerProxy = proxyStore.get(viewerId);\n      const connection = ConnectionHandler.getConnection(viewerProxy, \"ListPage_allPosts\");\n\n      if (connection) {\n        ConnectionHandler.insertEdgeAfter(connection, newPost);\n      }\n    },\n    onCompleted: () => {\n      callback();\n    },\n    onError: err => console.log(err)\n  });\n});","map":{"version":3,"sources":["/Users/xindi/xindi/relay-tutorial/src/mutations/CreatePostMutation.js"],"names":["commitMutation","graphql","ConnectionHandler","environment","tempID","mutation","title","content","userId","viewerId","callback","variables","input","clientMutationId","optimisticUpdater","proxyStore","id","newPost","create","setValue","viewerProxy","get","connection","getConnection","insertEdgeAfter","updater","createPostField","getRootField","getLinkedRecord","onCompleted","onError","err","console","log"],"mappings":";;AAAA,SAAQA,cAAR,EAAwBC,OAAxB,QAAsC,aAAtC;AACA,SAAQC,iBAAR,QAAgC,eAAhC;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AAEA,IAAIC,MAAM,GAAG,CAAb;AACA,MAAMC,QAAQ,8ZAAd;AAeA,gBAAe,CAACC,KAAD,EAAQC,OAAR,EAAiBC,MAAjB,EAAyBC,QAAzB,EAAmCC,QAAnC,KAAgD;AAC3D,QAAMC,SAAS,GAAG;AACdC,IAAAA,KAAK,EAAE;AACHN,MAAAA,KADG;AAEHC,MAAAA,OAFG;AAGHC,MAAAA,MAHG;AAIHK,MAAAA,gBAAgB,EAAE;AAJf;AADO,GAAlB;AASAb,EAAAA,cAAc,CAACG,WAAD,EAAc;AACxBE,IAAAA,QADwB;AAExBM,IAAAA,SAFwB;AAGxBG,IAAAA,iBAAiB,EAAEC,UAAU,IAAI;AAC7B,YAAMC,EAAE,GAAG,oBAAoBZ,MAAM,EAArC;AACA,YAAMa,OAAO,GAAGF,UAAU,CAACG,MAAX,CAAkBF,EAAlB,EAAsB,MAAtB,CAAhB;AACAC,MAAAA,OAAO,CAACE,QAAR,CAAiBH,EAAjB,EAAqB,IAArB;AACAC,MAAAA,OAAO,CAACE,QAAR,CAAiBb,KAAjB,EAAwB,OAAxB;AACAW,MAAAA,OAAO,CAACE,QAAR,CAAiBZ,OAAjB,EAA0B,SAA1B;AACA,YAAMa,WAAW,GAAGL,UAAU,CAACM,GAAX,CAAeZ,QAAf,CAApB;AACA,YAAMa,UAAU,GAAGpB,iBAAiB,CAACqB,aAAlB,CACfH,WADe,EAEf,mBAFe,CAAnB;;AAIA,UAAGE,UAAH,EAAc;AACVpB,QAAAA,iBAAiB,CAACsB,eAAlB,CAAkCF,UAAlC,EAA8CL,OAA9C;AACH;AACJ,KAjBuB;AAkBxBQ,IAAAA,OAAO,EAAEV,UAAU,IAAI;AACnB,YAAMW,eAAe,GAAGX,UAAU,CAACY,YAAX,CAAwB,YAAxB,CAAxB;AACA,YAAMV,OAAO,GAAGS,eAAe,CAACE,eAAhB,CAAgC,MAAhC,CAAhB;AACA,YAAMR,WAAW,GAAGL,UAAU,CAACM,GAAX,CAAeZ,QAAf,CAApB;AACA,YAAMa,UAAU,GAAEpB,iBAAiB,CAACqB,aAAlB,CACdH,WADc,EAEd,mBAFc,CAAlB;;AAIA,UAAGE,UAAH,EAAc;AACVpB,QAAAA,iBAAiB,CAACsB,eAAlB,CAAkCF,UAAlC,EAA8CL,OAA9C;AACH;AACJ,KA7BuB;AA8BxBY,IAAAA,WAAW,EAAE,MAAM;AACfnB,MAAAA,QAAQ;AACX,KAhCuB;AAiCxBoB,IAAAA,OAAO,EAAEC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ;AAjCQ,GAAd,CAAd;AAmCH,CA7CD","sourcesContent":["import {commitMutation, graphql} from 'react-relay';\nimport {ConnectionHandler} from 'relay-runtime';\nimport environment from '../Environment';\n\nlet tempID = 0;\nconst mutation = graphql`\n    mutation CreatePostMutation($input: CreatePostInput!){\n        createPost(input: $input){\n            post{\n                id\n                title\n                content\n                author{\n                    fullname\n                }\n            }\n        }\n    }\n`;\n\nexport default (title, content, userId, viewerId, callback) => {\n    const variables = {\n        input: {\n            title,\n            content,\n            userId,\n            clientMutationId: \"\"\n        }\n    };\n\n    commitMutation(environment, {\n        mutation,\n        variables,\n        optimisticUpdater: proxyStore => {\n            const id = \"client:newPost:\" + tempID++;\n            const newPost = proxyStore.create(id, \"Post\");\n            newPost.setValue(id, \"id\");\n            newPost.setValue(title, \"title\");\n            newPost.setValue(content, \"content\");\n            const viewerProxy = proxyStore.get(viewerId);\n            const connection = ConnectionHandler.getConnection(\n                viewerProxy,\n                \"ListPage_allPosts\"\n            );\n            if(connection){\n                ConnectionHandler.insertEdgeAfter(connection, newPost);\n            }\n        },\n        updater: proxyStore => {\n            const createPostField = proxyStore.getRootField(\"createPost\");\n            const newPost = createPostField.getLinkedRecord(\"post\");\n            const viewerProxy = proxyStore.get(viewerId);\n            const connection= ConnectionHandler.getConnection(\n                viewerProxy,\n                \"ListPage_allPosts\"\n            );\n            if(connection){\n                ConnectionHandler.insertEdgeAfter(connection, newPost);\n            }\n        },\n        onCompleted: () => {\n            callback();\n        },\n        onError: err => console.log(err)\n    });\n};\n"]},"metadata":{},"sourceType":"module"}