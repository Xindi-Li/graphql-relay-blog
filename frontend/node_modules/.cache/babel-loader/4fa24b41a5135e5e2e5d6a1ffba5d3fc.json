{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar RelayModernRecord = require('./RelayModernRecord');\n\nvar RelayProfiler = require('../util/RelayProfiler');\n\nvar invariant = require(\"fbjs/lib/invariant\");\n\nvar warning = require(\"fbjs/lib/warning\");\n\nvar _require = require('../util/RelayConcreteNode'),\n    CONDITION = _require.CONDITION,\n    CLIENT_EXTENSION = _require.CLIENT_EXTENSION,\n    DEFER = _require.DEFER,\n    INLINE_FRAGMENT = _require.INLINE_FRAGMENT,\n    LINKED_FIELD = _require.LINKED_FIELD,\n    LINKED_HANDLE = _require.LINKED_HANDLE,\n    MODULE_IMPORT = _require.MODULE_IMPORT,\n    SCALAR_FIELD = _require.SCALAR_FIELD,\n    SCALAR_HANDLE = _require.SCALAR_HANDLE,\n    STREAM = _require.STREAM;\n\nvar _require2 = require('./ClientID'),\n    generateClientID = _require2.generateClientID,\n    isClientID = _require2.isClientID;\n\nvar _require3 = require('./RelayModernSelector'),\n    createNormalizationSelector = _require3.createNormalizationSelector;\n\nvar _require4 = require('./RelayStoreUtils'),\n    getArgumentValues = _require4.getArgumentValues,\n    getHandleStorageKey = _require4.getHandleStorageKey,\n    getModuleComponentKey = _require4.getModuleComponentKey,\n    getModuleOperationKey = _require4.getModuleOperationKey,\n    getStorageKey = _require4.getStorageKey,\n    TYPENAME_KEY = _require4.TYPENAME_KEY;\n/**\n * Normalizes the results of a query and standard GraphQL response, writing the\n * normalized records/fields into the given MutableRecordSource.\n */\n\n\nfunction normalize(recordSource, selector, response, options) {\n  var dataID = selector.dataID,\n      node = selector.node,\n      variables = selector.variables;\n  var normalizer = new RelayResponseNormalizer(recordSource, variables, options);\n  return normalizer.normalizeResponse(node, dataID, response);\n}\n/**\n * @private\n *\n * Helper for handling payloads.\n */\n\n\nvar RelayResponseNormalizer =\n/*#__PURE__*/\nfunction () {\n  function RelayResponseNormalizer(recordSource, variables, options) {\n    this._getDataId = options.getDataID;\n    this._handleFieldPayloads = [];\n    this._incrementalPlaceholders = [];\n    this._isClientExtension = false;\n    this._moduleImportPayloads = [];\n    this._path = options.path ? (0, _toConsumableArray2[\"default\"])(options.path) : [];\n    this._recordSource = recordSource;\n    this._request = options.request;\n    this._variables = variables;\n  }\n\n  var _proto = RelayResponseNormalizer.prototype;\n\n  _proto.normalizeResponse = function normalizeResponse(node, dataID, data) {\n    var record = this._recordSource.get(dataID);\n\n    !record ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer(): Expected root record `%s` to exist.', dataID) : invariant(false) : void 0;\n\n    this._traverseSelections(node, record, data);\n\n    return {\n      errors: null,\n      fieldPayloads: this._handleFieldPayloads,\n      incrementalPlaceholders: this._incrementalPlaceholders,\n      moduleImportPayloads: this._moduleImportPayloads,\n      source: this._recordSource,\n      isFinal: false\n    };\n  };\n\n  _proto._getVariableValue = function _getVariableValue(name) {\n    !this._variables.hasOwnProperty(name) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer(): Undefined variable `%s`.', name) : invariant(false) : void 0;\n    return this._variables[name];\n  };\n\n  _proto._getRecordType = function _getRecordType(data) {\n    var typeName = data[TYPENAME_KEY];\n    !(typeName != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer(): Expected a typename for record `%s`.', JSON.stringify(data, null, 2)) : invariant(false) : void 0;\n    return typeName;\n  };\n\n  _proto._traverseSelections = function _traverseSelections(node, record, data) {\n    for (var i = 0; i < node.selections.length; i++) {\n      var selection = node.selections[i];\n\n      switch (selection.kind) {\n        case SCALAR_FIELD:\n        case LINKED_FIELD:\n          this._normalizeField(node, selection, record, data);\n\n          break;\n\n        case CONDITION:\n          var conditionValue = this._getVariableValue(selection.condition);\n\n          if (conditionValue === selection.passingValue) {\n            this._traverseSelections(selection, record, data);\n          }\n\n          break;\n\n        case INLINE_FRAGMENT:\n          var _typeName = RelayModernRecord.getType(record);\n\n          if (_typeName === selection.type) {\n            this._traverseSelections(selection, record, data);\n          }\n\n          break;\n\n        case LINKED_HANDLE:\n        case SCALAR_HANDLE:\n          var args = selection.args ? getArgumentValues(selection.args, this._variables) : {};\n          var fieldKey = getStorageKey(selection, this._variables);\n          var handleKey = getHandleStorageKey(selection, this._variables);\n\n          this._handleFieldPayloads.push({\n            args: args,\n            dataID: RelayModernRecord.getDataID(record),\n            fieldKey: fieldKey,\n            handle: selection.handle,\n            handleKey: handleKey\n          });\n\n          break;\n\n        case MODULE_IMPORT:\n          this._normalizeModuleImport(node, selection, record, data);\n\n          break;\n\n        case DEFER:\n          this._normalizeDefer(selection, record, data);\n\n          break;\n\n        case STREAM:\n          this._normalizeStream(selection, record, data);\n\n          break;\n\n        case CLIENT_EXTENSION:\n          var isClientExtension = this._isClientExtension;\n          this._isClientExtension = true;\n\n          this._traverseSelections(selection, record, data);\n\n          this._isClientExtension = isClientExtension;\n          break;\n\n        default:\n          selection;\n          !false ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer(): Unexpected ast kind `%s`.', selection.kind) : invariant(false) : void 0;\n      }\n    }\n  };\n\n  _proto._normalizeDefer = function _normalizeDefer(defer, record, data) {\n    var isDeferred = defer[\"if\"] === null || this._getVariableValue(defer[\"if\"]);\n\n    if (process.env.NODE_ENV !== \"production\") {\n      process.env.NODE_ENV !== \"production\" ? warning(typeof isDeferred === 'boolean', 'RelayResponseNormalizer: Expected value for @defer `if` argument to ' + 'be a boolean, got `%s`.', isDeferred) : void 0;\n    }\n\n    if (isDeferred === false) {\n      // If defer is disabled there will be no additional response chunk:\n      // normalize the data already present.\n      this._traverseSelections(defer, record, data);\n    } else {\n      // Otherwise data *for this selection* should not be present: enqueue\n      // metadata to process the subsequent response chunk.\n      this._incrementalPlaceholders.push({\n        kind: 'defer',\n        data: data,\n        label: defer.label,\n        path: (0, _toConsumableArray2[\"default\"])(this._path),\n        selector: createNormalizationSelector(defer, RelayModernRecord.getDataID(record), this._variables),\n        typeName: RelayModernRecord.getType(record)\n      });\n    }\n  };\n\n  _proto._normalizeStream = function _normalizeStream(stream, record, data) {\n    // Always normalize regardless of whether streaming is enabled or not,\n    // this populates the initial array value (including any items when\n    // initial_count > 0).\n    this._traverseSelections(stream, record, data);\n\n    var isStreamed = stream[\"if\"] === null || this._getVariableValue(stream[\"if\"]);\n\n    if (process.env.NODE_ENV !== \"production\") {\n      process.env.NODE_ENV !== \"production\" ? warning(typeof isStreamed === 'boolean', 'RelayResponseNormalizer: Expected value for @stream `if` argument ' + 'to be a boolean, got `%s`.', isStreamed) : void 0;\n    }\n\n    if (isStreamed === true) {\n      // If streaming is enabled, *also* emit metadata to process any\n      // response chunks that may be delivered.\n      this._incrementalPlaceholders.push({\n        kind: 'stream',\n        label: stream.label,\n        path: (0, _toConsumableArray2[\"default\"])(this._path),\n        parentID: RelayModernRecord.getDataID(record),\n        node: stream,\n        variables: this._variables\n      });\n    }\n  };\n\n  _proto._normalizeModuleImport = function _normalizeModuleImport(parent, moduleImport, record, data) {\n    var _componentReference, _operationReference;\n\n    !(typeof data === 'object' && data) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer: Expected data for @module to be an object.') : invariant(false) : void 0;\n    var typeName = RelayModernRecord.getType(record);\n    var componentKey = getModuleComponentKey(moduleImport.documentName);\n    var componentReference = data[componentKey];\n    RelayModernRecord.setValue(record, componentKey, (_componentReference = componentReference) !== null && _componentReference !== void 0 ? _componentReference : null);\n    var operationKey = getModuleOperationKey(moduleImport.documentName);\n    var operationReference = data[operationKey];\n    RelayModernRecord.setValue(record, operationKey, (_operationReference = operationReference) !== null && _operationReference !== void 0 ? _operationReference : null);\n\n    if (operationReference != null) {\n      this._moduleImportPayloads.push({\n        data: data,\n        dataID: RelayModernRecord.getDataID(record),\n        operationReference: operationReference,\n        path: (0, _toConsumableArray2[\"default\"])(this._path),\n        typeName: typeName,\n        variables: this._variables\n      });\n    }\n  };\n\n  _proto._normalizeField = function _normalizeField(parent, selection, record, data) {\n    !(typeof data === 'object' && data) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'writeField(): Expected data for field `%s` to be an object.', selection.name) : invariant(false) : void 0;\n    var responseKey = selection.alias || selection.name;\n    var storageKey = getStorageKey(selection, this._variables);\n    var fieldValue = data[responseKey];\n\n    if (fieldValue == null) {\n      if (fieldValue === undefined) {\n        // Fields that are missing in the response are not set on the record.\n        // There are three main cases where this can occur:\n        // - Inside a client extension: the server will not generally return\n        //   values for these fields, but a local update may provide them.\n        // - Fields on abstract types: these may be missing if the concrete\n        //   response type does not match the abstract type.\n        //\n        // Otherwise, missing fields usually indicate a server or user error (\n        // the latter for manually constructed payloads).\n        if (process.env.NODE_ENV !== \"production\") {\n          process.env.NODE_ENV !== \"production\" ? warning(this._isClientExtension || parent.kind === LINKED_FIELD && parent.concreteType == null ? true : Object.prototype.hasOwnProperty.call(data, responseKey), 'RelayResponseNormalizer: Payload did not contain a value ' + 'for field `%s: %s`. Check that you are parsing with the same ' + 'query that was used to fetch the payload.', responseKey, storageKey) : void 0;\n        }\n\n        return;\n      }\n\n      RelayModernRecord.setValue(record, storageKey, null);\n      return;\n    }\n\n    if (selection.kind === SCALAR_FIELD) {\n      RelayModernRecord.setValue(record, storageKey, fieldValue);\n    } else if (selection.kind === LINKED_FIELD) {\n      this._path.push(responseKey);\n\n      if (selection.plural) {\n        this._normalizePluralLink(selection, record, storageKey, fieldValue);\n      } else {\n        this._normalizeLink(selection, record, storageKey, fieldValue);\n      }\n\n      this._path.pop();\n    } else {\n      selection;\n      !false ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer(): Unexpected ast kind `%s` during normalization.', selection.kind) : invariant(false) : void 0;\n    }\n  };\n\n  _proto._normalizeLink = function _normalizeLink(field, record, storageKey, fieldValue) {\n    var _field$concreteType;\n\n    !(typeof fieldValue === 'object' && fieldValue) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer: Expected data for field `%s` to be an object.', storageKey) : invariant(false) : void 0;\n    var nextID = this._getDataId(\n    /* $FlowFixMe(>=0.98.0 site=www,mobile,react_native_fb,oss) This comment\n     * suppresses an error found when Flow v0.98 was deployed. To see the\n     * error delete this comment and run Flow. */\n    fieldValue,\n    /* $FlowFixMe(>=0.98.0 site=www,mobile,react_native_fb,oss) This comment\n     * suppresses an error found when Flow v0.98 was deployed. To see the\n     * error delete this comment and run Flow. */\n    (_field$concreteType = field.concreteType) !== null && _field$concreteType !== void 0 ? _field$concreteType : this._getRecordType(fieldValue)) || // Reuse previously generated client IDs\n    RelayModernRecord.getLinkedRecordID(record, storageKey) || generateClientID(RelayModernRecord.getDataID(record), storageKey);\n    !(typeof nextID === 'string') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer: Expected id on field `%s` to be a string.', storageKey) : invariant(false) : void 0;\n    RelayModernRecord.setLinkedRecordID(record, storageKey, nextID);\n\n    var nextRecord = this._recordSource.get(nextID);\n\n    if (!nextRecord) {\n      /* $FlowFixMe(>=0.98.0 site=www,mobile,react_native_fb,oss) This comment\n       * suppresses an error found when Flow v0.98 was deployed. To see the\n       * error delete this comment and run Flow. */\n      var _typeName2 = field.concreteType || this._getRecordType(fieldValue);\n\n      nextRecord = RelayModernRecord.create(nextID, _typeName2);\n\n      this._recordSource.set(nextID, nextRecord);\n    } else if (process.env.NODE_ENV !== \"production\") {\n      this._validateRecordType(nextRecord, field, fieldValue);\n    }\n    /* $FlowFixMe(>=0.98.0 site=www,mobile,react_native_fb,oss) This comment\n     * suppresses an error found when Flow v0.98 was deployed. To see the error\n     * delete this comment and run Flow. */\n\n\n    this._traverseSelections(field, nextRecord, fieldValue);\n  };\n\n  _proto._normalizePluralLink = function _normalizePluralLink(field, record, storageKey, fieldValue) {\n    var _this = this;\n\n    !Array.isArray(fieldValue) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer: Expected data for field `%s` to be an array ' + 'of objects.', storageKey) : invariant(false) : void 0;\n    var prevIDs = RelayModernRecord.getLinkedRecordIDs(record, storageKey);\n    var nextIDs = [];\n    fieldValue.forEach(function (item, nextIndex) {\n      var _field$concreteType2; // validate response data\n\n\n      if (item == null) {\n        nextIDs.push(item);\n        return;\n      }\n\n      _this._path.push(String(nextIndex));\n\n      !(typeof item === 'object') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer: Expected elements for field `%s` to be ' + 'objects.', storageKey) : invariant(false) : void 0;\n      var nextID = _this._getDataId(\n      /* $FlowFixMe(>=0.98.0 site=www,mobile,react_native_fb,oss) This comment\n       * suppresses an error found when Flow v0.98 was deployed. To see the\n       * error delete this comment and run Flow. */\n      item,\n      /* $FlowFixMe(>=0.98.0 site=www,mobile,react_native_fb,oss) This comment\n       * suppresses an error found when Flow v0.98 was deployed. To see the\n       * error delete this comment and run Flow. */\n      (_field$concreteType2 = field.concreteType) !== null && _field$concreteType2 !== void 0 ? _field$concreteType2 : _this._getRecordType(item)) || prevIDs && prevIDs[nextIndex] || // Reuse previously generated client IDs:\n      generateClientID(RelayModernRecord.getDataID(record), storageKey, nextIndex);\n      !(typeof nextID === 'string') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer: Expected id of elements of field `%s` to ' + 'be strings.', storageKey) : invariant(false) : void 0;\n      nextIDs.push(nextID);\n\n      var nextRecord = _this._recordSource.get(nextID);\n\n      if (!nextRecord) {\n        /* $FlowFixMe(>=0.98.0 site=www,mobile,react_native_fb,oss) This comment\n         * suppresses an error found when Flow v0.98 was deployed. To see the\n         * error delete this comment and run Flow. */\n        var _typeName3 = field.concreteType || _this._getRecordType(item);\n\n        nextRecord = RelayModernRecord.create(nextID, _typeName3);\n\n        _this._recordSource.set(nextID, nextRecord);\n      } else if (process.env.NODE_ENV !== \"production\") {\n        _this._validateRecordType(nextRecord, field, item);\n      }\n      /* $FlowFixMe(>=0.98.0 site=www,mobile,react_native_fb,oss) This comment\n       * suppresses an error found when Flow v0.98 was deployed. To see the\n       * error delete this comment and run Flow. */\n\n\n      _this._traverseSelections(field, nextRecord, item);\n\n      _this._path.pop();\n    });\n    RelayModernRecord.setLinkedRecordIDs(record, storageKey, nextIDs);\n  }\n  /**\n   * Warns if the type of the record does not match the type of the field/payload.\n   */\n  ;\n\n  _proto._validateRecordType = function _validateRecordType(record, field, payload) {\n    var _field$concreteType3;\n\n    var typeName = (_field$concreteType3 = field.concreteType) !== null && _field$concreteType3 !== void 0 ? _field$concreteType3 : this._getRecordType(payload);\n    process.env.NODE_ENV !== \"production\" ? warning(isClientID(RelayModernRecord.getDataID(record)) || RelayModernRecord.getType(record) === typeName, 'RelayResponseNormalizer: Invalid record `%s`. Expected %s to be ' + 'consistent, but the record was assigned conflicting types `%s` ' + 'and `%s`. The GraphQL server likely violated the globally unique ' + 'id requirement by returning the same id for different objects.', RelayModernRecord.getDataID(record), TYPENAME_KEY, RelayModernRecord.getType(record), typeName) : void 0;\n  };\n\n  return RelayResponseNormalizer;\n}();\n\nvar instrumentedNormalize = RelayProfiler.instrument('RelayResponseNormalizer.normalize', normalize);\nmodule.exports = {\n  normalize: instrumentedNormalize\n};","map":{"version":3,"sources":["/Users/xindi/xindi/graphql-relay-blog/frontend/node_modules/relay-runtime/lib/store/RelayResponseNormalizer.js"],"names":["_interopRequireDefault","require","_toConsumableArray2","RelayModernRecord","RelayProfiler","invariant","warning","_require","CONDITION","CLIENT_EXTENSION","DEFER","INLINE_FRAGMENT","LINKED_FIELD","LINKED_HANDLE","MODULE_IMPORT","SCALAR_FIELD","SCALAR_HANDLE","STREAM","_require2","generateClientID","isClientID","_require3","createNormalizationSelector","_require4","getArgumentValues","getHandleStorageKey","getModuleComponentKey","getModuleOperationKey","getStorageKey","TYPENAME_KEY","normalize","recordSource","selector","response","options","dataID","node","variables","normalizer","RelayResponseNormalizer","normalizeResponse","_getDataId","getDataID","_handleFieldPayloads","_incrementalPlaceholders","_isClientExtension","_moduleImportPayloads","_path","path","_recordSource","_request","request","_variables","_proto","prototype","data","record","get","process","env","NODE_ENV","_traverseSelections","errors","fieldPayloads","incrementalPlaceholders","moduleImportPayloads","source","isFinal","_getVariableValue","name","hasOwnProperty","_getRecordType","typeName","JSON","stringify","i","selections","length","selection","kind","_normalizeField","conditionValue","condition","passingValue","_typeName","getType","type","args","fieldKey","handleKey","push","handle","_normalizeModuleImport","_normalizeDefer","_normalizeStream","isClientExtension","defer","isDeferred","label","stream","isStreamed","parentID","parent","moduleImport","_componentReference","_operationReference","componentKey","documentName","componentReference","setValue","operationKey","operationReference","responseKey","alias","storageKey","fieldValue","undefined","concreteType","Object","call","plural","_normalizePluralLink","_normalizeLink","pop","field","_field$concreteType","nextID","getLinkedRecordID","setLinkedRecordID","nextRecord","_typeName2","create","set","_validateRecordType","_this","Array","isArray","prevIDs","getLinkedRecordIDs","nextIDs","forEach","item","nextIndex","_field$concreteType2","String","_typeName3","setLinkedRecordIDs","payload","_field$concreteType3","instrumentedNormalize","instrument","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar RelayModernRecord = require('./RelayModernRecord');\n\nvar RelayProfiler = require('../util/RelayProfiler');\n\nvar invariant = require(\"fbjs/lib/invariant\");\n\nvar warning = require(\"fbjs/lib/warning\");\n\nvar _require = require('../util/RelayConcreteNode'),\n    CONDITION = _require.CONDITION,\n    CLIENT_EXTENSION = _require.CLIENT_EXTENSION,\n    DEFER = _require.DEFER,\n    INLINE_FRAGMENT = _require.INLINE_FRAGMENT,\n    LINKED_FIELD = _require.LINKED_FIELD,\n    LINKED_HANDLE = _require.LINKED_HANDLE,\n    MODULE_IMPORT = _require.MODULE_IMPORT,\n    SCALAR_FIELD = _require.SCALAR_FIELD,\n    SCALAR_HANDLE = _require.SCALAR_HANDLE,\n    STREAM = _require.STREAM;\n\nvar _require2 = require('./ClientID'),\n    generateClientID = _require2.generateClientID,\n    isClientID = _require2.isClientID;\n\nvar _require3 = require('./RelayModernSelector'),\n    createNormalizationSelector = _require3.createNormalizationSelector;\n\nvar _require4 = require('./RelayStoreUtils'),\n    getArgumentValues = _require4.getArgumentValues,\n    getHandleStorageKey = _require4.getHandleStorageKey,\n    getModuleComponentKey = _require4.getModuleComponentKey,\n    getModuleOperationKey = _require4.getModuleOperationKey,\n    getStorageKey = _require4.getStorageKey,\n    TYPENAME_KEY = _require4.TYPENAME_KEY;\n\n/**\n * Normalizes the results of a query and standard GraphQL response, writing the\n * normalized records/fields into the given MutableRecordSource.\n */\nfunction normalize(recordSource, selector, response, options) {\n  var dataID = selector.dataID,\n      node = selector.node,\n      variables = selector.variables;\n  var normalizer = new RelayResponseNormalizer(recordSource, variables, options);\n  return normalizer.normalizeResponse(node, dataID, response);\n}\n/**\n * @private\n *\n * Helper for handling payloads.\n */\n\n\nvar RelayResponseNormalizer =\n/*#__PURE__*/\nfunction () {\n  function RelayResponseNormalizer(recordSource, variables, options) {\n    this._getDataId = options.getDataID;\n    this._handleFieldPayloads = [];\n    this._incrementalPlaceholders = [];\n    this._isClientExtension = false;\n    this._moduleImportPayloads = [];\n    this._path = options.path ? (0, _toConsumableArray2[\"default\"])(options.path) : [];\n    this._recordSource = recordSource;\n    this._request = options.request;\n    this._variables = variables;\n  }\n\n  var _proto = RelayResponseNormalizer.prototype;\n\n  _proto.normalizeResponse = function normalizeResponse(node, dataID, data) {\n    var record = this._recordSource.get(dataID);\n\n    !record ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer(): Expected root record `%s` to exist.', dataID) : invariant(false) : void 0;\n\n    this._traverseSelections(node, record, data);\n\n    return {\n      errors: null,\n      fieldPayloads: this._handleFieldPayloads,\n      incrementalPlaceholders: this._incrementalPlaceholders,\n      moduleImportPayloads: this._moduleImportPayloads,\n      source: this._recordSource,\n      isFinal: false\n    };\n  };\n\n  _proto._getVariableValue = function _getVariableValue(name) {\n    !this._variables.hasOwnProperty(name) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer(): Undefined variable `%s`.', name) : invariant(false) : void 0;\n    return this._variables[name];\n  };\n\n  _proto._getRecordType = function _getRecordType(data) {\n    var typeName = data[TYPENAME_KEY];\n    !(typeName != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer(): Expected a typename for record `%s`.', JSON.stringify(data, null, 2)) : invariant(false) : void 0;\n    return typeName;\n  };\n\n  _proto._traverseSelections = function _traverseSelections(node, record, data) {\n    for (var i = 0; i < node.selections.length; i++) {\n      var selection = node.selections[i];\n\n      switch (selection.kind) {\n        case SCALAR_FIELD:\n        case LINKED_FIELD:\n          this._normalizeField(node, selection, record, data);\n\n          break;\n\n        case CONDITION:\n          var conditionValue = this._getVariableValue(selection.condition);\n\n          if (conditionValue === selection.passingValue) {\n            this._traverseSelections(selection, record, data);\n          }\n\n          break;\n\n        case INLINE_FRAGMENT:\n          var _typeName = RelayModernRecord.getType(record);\n\n          if (_typeName === selection.type) {\n            this._traverseSelections(selection, record, data);\n          }\n\n          break;\n\n        case LINKED_HANDLE:\n        case SCALAR_HANDLE:\n          var args = selection.args ? getArgumentValues(selection.args, this._variables) : {};\n          var fieldKey = getStorageKey(selection, this._variables);\n          var handleKey = getHandleStorageKey(selection, this._variables);\n\n          this._handleFieldPayloads.push({\n            args: args,\n            dataID: RelayModernRecord.getDataID(record),\n            fieldKey: fieldKey,\n            handle: selection.handle,\n            handleKey: handleKey\n          });\n\n          break;\n\n        case MODULE_IMPORT:\n          this._normalizeModuleImport(node, selection, record, data);\n\n          break;\n\n        case DEFER:\n          this._normalizeDefer(selection, record, data);\n\n          break;\n\n        case STREAM:\n          this._normalizeStream(selection, record, data);\n\n          break;\n\n        case CLIENT_EXTENSION:\n          var isClientExtension = this._isClientExtension;\n          this._isClientExtension = true;\n\n          this._traverseSelections(selection, record, data);\n\n          this._isClientExtension = isClientExtension;\n          break;\n\n        default:\n          selection;\n          !false ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer(): Unexpected ast kind `%s`.', selection.kind) : invariant(false) : void 0;\n      }\n    }\n  };\n\n  _proto._normalizeDefer = function _normalizeDefer(defer, record, data) {\n    var isDeferred = defer[\"if\"] === null || this._getVariableValue(defer[\"if\"]);\n\n    if (process.env.NODE_ENV !== \"production\") {\n      process.env.NODE_ENV !== \"production\" ? warning(typeof isDeferred === 'boolean', 'RelayResponseNormalizer: Expected value for @defer `if` argument to ' + 'be a boolean, got `%s`.', isDeferred) : void 0;\n    }\n\n    if (isDeferred === false) {\n      // If defer is disabled there will be no additional response chunk:\n      // normalize the data already present.\n      this._traverseSelections(defer, record, data);\n    } else {\n      // Otherwise data *for this selection* should not be present: enqueue\n      // metadata to process the subsequent response chunk.\n      this._incrementalPlaceholders.push({\n        kind: 'defer',\n        data: data,\n        label: defer.label,\n        path: (0, _toConsumableArray2[\"default\"])(this._path),\n        selector: createNormalizationSelector(defer, RelayModernRecord.getDataID(record), this._variables),\n        typeName: RelayModernRecord.getType(record)\n      });\n    }\n  };\n\n  _proto._normalizeStream = function _normalizeStream(stream, record, data) {\n    // Always normalize regardless of whether streaming is enabled or not,\n    // this populates the initial array value (including any items when\n    // initial_count > 0).\n    this._traverseSelections(stream, record, data);\n\n    var isStreamed = stream[\"if\"] === null || this._getVariableValue(stream[\"if\"]);\n\n    if (process.env.NODE_ENV !== \"production\") {\n      process.env.NODE_ENV !== \"production\" ? warning(typeof isStreamed === 'boolean', 'RelayResponseNormalizer: Expected value for @stream `if` argument ' + 'to be a boolean, got `%s`.', isStreamed) : void 0;\n    }\n\n    if (isStreamed === true) {\n      // If streaming is enabled, *also* emit metadata to process any\n      // response chunks that may be delivered.\n      this._incrementalPlaceholders.push({\n        kind: 'stream',\n        label: stream.label,\n        path: (0, _toConsumableArray2[\"default\"])(this._path),\n        parentID: RelayModernRecord.getDataID(record),\n        node: stream,\n        variables: this._variables\n      });\n    }\n  };\n\n  _proto._normalizeModuleImport = function _normalizeModuleImport(parent, moduleImport, record, data) {\n    var _componentReference, _operationReference;\n\n    !(typeof data === 'object' && data) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer: Expected data for @module to be an object.') : invariant(false) : void 0;\n    var typeName = RelayModernRecord.getType(record);\n    var componentKey = getModuleComponentKey(moduleImport.documentName);\n    var componentReference = data[componentKey];\n    RelayModernRecord.setValue(record, componentKey, (_componentReference = componentReference) !== null && _componentReference !== void 0 ? _componentReference : null);\n    var operationKey = getModuleOperationKey(moduleImport.documentName);\n    var operationReference = data[operationKey];\n    RelayModernRecord.setValue(record, operationKey, (_operationReference = operationReference) !== null && _operationReference !== void 0 ? _operationReference : null);\n\n    if (operationReference != null) {\n      this._moduleImportPayloads.push({\n        data: data,\n        dataID: RelayModernRecord.getDataID(record),\n        operationReference: operationReference,\n        path: (0, _toConsumableArray2[\"default\"])(this._path),\n        typeName: typeName,\n        variables: this._variables\n      });\n    }\n  };\n\n  _proto._normalizeField = function _normalizeField(parent, selection, record, data) {\n    !(typeof data === 'object' && data) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'writeField(): Expected data for field `%s` to be an object.', selection.name) : invariant(false) : void 0;\n    var responseKey = selection.alias || selection.name;\n    var storageKey = getStorageKey(selection, this._variables);\n    var fieldValue = data[responseKey];\n\n    if (fieldValue == null) {\n      if (fieldValue === undefined) {\n        // Fields that are missing in the response are not set on the record.\n        // There are three main cases where this can occur:\n        // - Inside a client extension: the server will not generally return\n        //   values for these fields, but a local update may provide them.\n        // - Fields on abstract types: these may be missing if the concrete\n        //   response type does not match the abstract type.\n        //\n        // Otherwise, missing fields usually indicate a server or user error (\n        // the latter for manually constructed payloads).\n        if (process.env.NODE_ENV !== \"production\") {\n          process.env.NODE_ENV !== \"production\" ? warning(this._isClientExtension || parent.kind === LINKED_FIELD && parent.concreteType == null ? true : Object.prototype.hasOwnProperty.call(data, responseKey), 'RelayResponseNormalizer: Payload did not contain a value ' + 'for field `%s: %s`. Check that you are parsing with the same ' + 'query that was used to fetch the payload.', responseKey, storageKey) : void 0;\n        }\n\n        return;\n      }\n\n      RelayModernRecord.setValue(record, storageKey, null);\n      return;\n    }\n\n    if (selection.kind === SCALAR_FIELD) {\n      RelayModernRecord.setValue(record, storageKey, fieldValue);\n    } else if (selection.kind === LINKED_FIELD) {\n      this._path.push(responseKey);\n\n      if (selection.plural) {\n        this._normalizePluralLink(selection, record, storageKey, fieldValue);\n      } else {\n        this._normalizeLink(selection, record, storageKey, fieldValue);\n      }\n\n      this._path.pop();\n    } else {\n      selection;\n      !false ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer(): Unexpected ast kind `%s` during normalization.', selection.kind) : invariant(false) : void 0;\n    }\n  };\n\n  _proto._normalizeLink = function _normalizeLink(field, record, storageKey, fieldValue) {\n    var _field$concreteType;\n\n    !(typeof fieldValue === 'object' && fieldValue) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer: Expected data for field `%s` to be an object.', storageKey) : invariant(false) : void 0;\n    var nextID = this._getDataId(\n    /* $FlowFixMe(>=0.98.0 site=www,mobile,react_native_fb,oss) This comment\n     * suppresses an error found when Flow v0.98 was deployed. To see the\n     * error delete this comment and run Flow. */\n    fieldValue,\n    /* $FlowFixMe(>=0.98.0 site=www,mobile,react_native_fb,oss) This comment\n     * suppresses an error found when Flow v0.98 was deployed. To see the\n     * error delete this comment and run Flow. */\n    (_field$concreteType = field.concreteType) !== null && _field$concreteType !== void 0 ? _field$concreteType : this._getRecordType(fieldValue)) || // Reuse previously generated client IDs\n    RelayModernRecord.getLinkedRecordID(record, storageKey) || generateClientID(RelayModernRecord.getDataID(record), storageKey);\n    !(typeof nextID === 'string') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer: Expected id on field `%s` to be a string.', storageKey) : invariant(false) : void 0;\n    RelayModernRecord.setLinkedRecordID(record, storageKey, nextID);\n\n    var nextRecord = this._recordSource.get(nextID);\n\n    if (!nextRecord) {\n      /* $FlowFixMe(>=0.98.0 site=www,mobile,react_native_fb,oss) This comment\n       * suppresses an error found when Flow v0.98 was deployed. To see the\n       * error delete this comment and run Flow. */\n      var _typeName2 = field.concreteType || this._getRecordType(fieldValue);\n\n      nextRecord = RelayModernRecord.create(nextID, _typeName2);\n\n      this._recordSource.set(nextID, nextRecord);\n    } else if (process.env.NODE_ENV !== \"production\") {\n      this._validateRecordType(nextRecord, field, fieldValue);\n    }\n    /* $FlowFixMe(>=0.98.0 site=www,mobile,react_native_fb,oss) This comment\n     * suppresses an error found when Flow v0.98 was deployed. To see the error\n     * delete this comment and run Flow. */\n\n\n    this._traverseSelections(field, nextRecord, fieldValue);\n  };\n\n  _proto._normalizePluralLink = function _normalizePluralLink(field, record, storageKey, fieldValue) {\n    var _this = this;\n\n    !Array.isArray(fieldValue) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer: Expected data for field `%s` to be an array ' + 'of objects.', storageKey) : invariant(false) : void 0;\n    var prevIDs = RelayModernRecord.getLinkedRecordIDs(record, storageKey);\n    var nextIDs = [];\n    fieldValue.forEach(function (item, nextIndex) {\n      var _field$concreteType2;\n\n      // validate response data\n      if (item == null) {\n        nextIDs.push(item);\n        return;\n      }\n\n      _this._path.push(String(nextIndex));\n\n      !(typeof item === 'object') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer: Expected elements for field `%s` to be ' + 'objects.', storageKey) : invariant(false) : void 0;\n      var nextID = _this._getDataId(\n      /* $FlowFixMe(>=0.98.0 site=www,mobile,react_native_fb,oss) This comment\n       * suppresses an error found when Flow v0.98 was deployed. To see the\n       * error delete this comment and run Flow. */\n      item,\n      /* $FlowFixMe(>=0.98.0 site=www,mobile,react_native_fb,oss) This comment\n       * suppresses an error found when Flow v0.98 was deployed. To see the\n       * error delete this comment and run Flow. */\n      (_field$concreteType2 = field.concreteType) !== null && _field$concreteType2 !== void 0 ? _field$concreteType2 : _this._getRecordType(item)) || prevIDs && prevIDs[nextIndex] || // Reuse previously generated client IDs:\n      generateClientID(RelayModernRecord.getDataID(record), storageKey, nextIndex);\n      !(typeof nextID === 'string') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer: Expected id of elements of field `%s` to ' + 'be strings.', storageKey) : invariant(false) : void 0;\n      nextIDs.push(nextID);\n\n      var nextRecord = _this._recordSource.get(nextID);\n\n      if (!nextRecord) {\n        /* $FlowFixMe(>=0.98.0 site=www,mobile,react_native_fb,oss) This comment\n         * suppresses an error found when Flow v0.98 was deployed. To see the\n         * error delete this comment and run Flow. */\n        var _typeName3 = field.concreteType || _this._getRecordType(item);\n\n        nextRecord = RelayModernRecord.create(nextID, _typeName3);\n\n        _this._recordSource.set(nextID, nextRecord);\n      } else if (process.env.NODE_ENV !== \"production\") {\n        _this._validateRecordType(nextRecord, field, item);\n      }\n      /* $FlowFixMe(>=0.98.0 site=www,mobile,react_native_fb,oss) This comment\n       * suppresses an error found when Flow v0.98 was deployed. To see the\n       * error delete this comment and run Flow. */\n\n\n      _this._traverseSelections(field, nextRecord, item);\n\n      _this._path.pop();\n    });\n    RelayModernRecord.setLinkedRecordIDs(record, storageKey, nextIDs);\n  }\n  /**\n   * Warns if the type of the record does not match the type of the field/payload.\n   */\n  ;\n\n  _proto._validateRecordType = function _validateRecordType(record, field, payload) {\n    var _field$concreteType3;\n\n    var typeName = (_field$concreteType3 = field.concreteType) !== null && _field$concreteType3 !== void 0 ? _field$concreteType3 : this._getRecordType(payload);\n    process.env.NODE_ENV !== \"production\" ? warning(isClientID(RelayModernRecord.getDataID(record)) || RelayModernRecord.getType(record) === typeName, 'RelayResponseNormalizer: Invalid record `%s`. Expected %s to be ' + 'consistent, but the record was assigned conflicting types `%s` ' + 'and `%s`. The GraphQL server likely violated the globally unique ' + 'id requirement by returning the same id for different objects.', RelayModernRecord.getDataID(record), TYPENAME_KEY, RelayModernRecord.getType(record), typeName) : void 0;\n  };\n\n  return RelayResponseNormalizer;\n}();\n\nvar instrumentedNormalize = RelayProfiler.instrument('RelayResponseNormalizer.normalize', normalize);\nmodule.exports = {\n  normalize: instrumentedNormalize\n};"]},"metadata":{},"sourceType":"script"}