{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar RelayConcreteNode = require('../util/RelayConcreteNode');\n\nvar RelayModernRecord = require('./RelayModernRecord');\n\nvar RelayStoreUtils = require('./RelayStoreUtils');\n\nvar cloneRelayHandleSourceField = require('./cloneRelayHandleSourceField');\n\nvar invariant = require(\"fbjs/lib/invariant\");\n\nvar CONDITION = RelayConcreteNode.CONDITION,\n    CLIENT_EXTENSION = RelayConcreteNode.CLIENT_EXTENSION,\n    DEFER = RelayConcreteNode.DEFER,\n    FRAGMENT_SPREAD = RelayConcreteNode.FRAGMENT_SPREAD,\n    INLINE_FRAGMENT = RelayConcreteNode.INLINE_FRAGMENT,\n    LINKED_FIELD = RelayConcreteNode.LINKED_FIELD,\n    MODULE_IMPORT = RelayConcreteNode.MODULE_IMPORT,\n    LINKED_HANDLE = RelayConcreteNode.LINKED_HANDLE,\n    SCALAR_FIELD = RelayConcreteNode.SCALAR_FIELD,\n    SCALAR_HANDLE = RelayConcreteNode.SCALAR_HANDLE,\n    STREAM = RelayConcreteNode.STREAM;\nvar getStorageKey = RelayStoreUtils.getStorageKey,\n    getModuleOperationKey = RelayStoreUtils.getModuleOperationKey;\n\nfunction mark(recordSource, selector, references, operationLoader) {\n  var dataID = selector.dataID,\n      node = selector.node,\n      variables = selector.variables;\n  var marker = new RelayReferenceMarker(recordSource, variables, references, operationLoader);\n  marker.mark(node, dataID);\n}\n/**\n * @private\n */\n\n\nvar RelayReferenceMarker =\n/*#__PURE__*/\nfunction () {\n  function RelayReferenceMarker(recordSource, variables, references, operationLoader) {\n    var _operationLoader;\n\n    this._operationLoader = (_operationLoader = operationLoader) !== null && _operationLoader !== void 0 ? _operationLoader : null;\n    this._recordSource = recordSource;\n    this._references = references;\n    this._variables = variables;\n  }\n\n  var _proto = RelayReferenceMarker.prototype;\n\n  _proto.mark = function mark(node, dataID) {\n    this._traverse(node, dataID);\n  };\n\n  _proto._traverse = function _traverse(node, dataID) {\n    this._references.add(dataID);\n\n    var record = this._recordSource.get(dataID);\n\n    if (record == null) {\n      return;\n    }\n\n    this._traverseSelections(node.selections, record);\n  };\n\n  _proto._getVariableValue = function _getVariableValue(name) {\n    !this._variables.hasOwnProperty(name) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayReferenceMarker(): Undefined variable `%s`.', name) : invariant(false) : void 0;\n    return this._variables[name];\n  };\n\n  _proto._traverseSelections = function _traverseSelections(selections, record) {\n    var _this = this;\n\n    selections.forEach(function (selection) {\n      /* eslint-disable no-fallthrough */\n      switch (selection.kind) {\n        case LINKED_FIELD:\n          if (selection.plural) {\n            _this._traversePluralLink(selection, record);\n          } else {\n            _this._traverseLink(selection, record);\n          }\n\n          break;\n\n        case CONDITION:\n          var conditionValue = _this._getVariableValue(selection.condition);\n\n          if (conditionValue === selection.passingValue) {\n            _this._traverseSelections(selection.selections, record);\n          }\n\n          break;\n\n        case INLINE_FRAGMENT:\n          var typeName = RelayModernRecord.getType(record);\n\n          if (typeName != null && typeName === selection.type) {\n            _this._traverseSelections(selection.selections, record);\n          }\n\n          break;\n\n        case FRAGMENT_SPREAD:\n          !false ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayReferenceMarker(): Unexpected fragment spread `...%s`, ' + 'expected all fragments to be inlined.', selection.name) : invariant(false) : void 0;\n\n        case LINKED_HANDLE:\n          // The selections for a \"handle\" field are the same as those of the\n          // original linked field where the handle was applied. Reference marking\n          // therefore requires traversing the original field selections against\n          // the synthesized client field.\n          //\n          // TODO: Instead of finding the source field in `selections`, change\n          // the concrete structure to allow shared subtrees, and have the linked\n          // handle directly refer to the same selections as the LinkedField that\n          // it was split from.\n          var handleField = cloneRelayHandleSourceField(selection, selections, _this._variables);\n\n          if (handleField.plural) {\n            _this._traversePluralLink(handleField, record);\n          } else {\n            _this._traverseLink(handleField, record);\n          }\n\n          break;\n\n        case DEFER:\n        case STREAM:\n          _this._traverseSelections(selection.selections, record);\n\n          break;\n\n        case SCALAR_FIELD:\n        case SCALAR_HANDLE:\n          break;\n\n        case MODULE_IMPORT:\n          _this._traverseModuleImport(selection, record);\n\n          break;\n\n        case CLIENT_EXTENSION:\n          _this._traverseSelections(selection.selections, record);\n\n          break;\n\n        default:\n          selection;\n          !false ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayReferenceMarker: Unknown AST node `%s`.', selection) : invariant(false) : void 0;\n      }\n    });\n  };\n\n  _proto._traverseModuleImport = function _traverseModuleImport(moduleImport, record) {\n    var operationLoader = this._operationLoader;\n    !(operationLoader !== null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayReferenceMarker: Expected an operationLoader to be configured when using `@module`.') : invariant(false) : void 0;\n    var operationKey = getModuleOperationKey(moduleImport.documentName);\n    var operationReference = RelayModernRecord.getValue(record, operationKey);\n\n    if (operationReference == null) {\n      return;\n    }\n\n    var operation = operationLoader.get(operationReference);\n\n    if (operation != null) {\n      this._traverseSelections(operation.selections, record);\n    } // Otherwise, if the operation is not available, we assume that the data\n    // cannot have been processed yet and therefore isn't in the store to\n    // begin with.\n\n  };\n\n  _proto._traverseLink = function _traverseLink(field, record) {\n    var storageKey = getStorageKey(field, this._variables);\n    var linkedID = RelayModernRecord.getLinkedRecordID(record, storageKey);\n\n    if (linkedID == null) {\n      return;\n    }\n\n    this._traverse(field, linkedID);\n  };\n\n  _proto._traversePluralLink = function _traversePluralLink(field, record) {\n    var _this2 = this;\n\n    var storageKey = getStorageKey(field, this._variables);\n    var linkedIDs = RelayModernRecord.getLinkedRecordIDs(record, storageKey);\n\n    if (linkedIDs == null) {\n      return;\n    }\n\n    linkedIDs.forEach(function (linkedID) {\n      if (linkedID != null) {\n        _this2._traverse(field, linkedID);\n      }\n    });\n  };\n\n  return RelayReferenceMarker;\n}();\n\nmodule.exports = {\n  mark: mark\n};","map":{"version":3,"sources":["/Users/xindi/xindi/relay-tutorial/node_modules/relay-runtime/lib/store/RelayReferenceMarker.js"],"names":["RelayConcreteNode","require","RelayModernRecord","RelayStoreUtils","cloneRelayHandleSourceField","invariant","CONDITION","CLIENT_EXTENSION","DEFER","FRAGMENT_SPREAD","INLINE_FRAGMENT","LINKED_FIELD","MODULE_IMPORT","LINKED_HANDLE","SCALAR_FIELD","SCALAR_HANDLE","STREAM","getStorageKey","getModuleOperationKey","mark","recordSource","selector","references","operationLoader","dataID","node","variables","marker","RelayReferenceMarker","_operationLoader","_recordSource","_references","_variables","_proto","prototype","_traverse","add","record","get","_traverseSelections","selections","_getVariableValue","name","hasOwnProperty","process","env","NODE_ENV","_this","forEach","selection","kind","plural","_traversePluralLink","_traverseLink","conditionValue","condition","passingValue","typeName","getType","type","handleField","_traverseModuleImport","moduleImport","operationKey","documentName","operationReference","getValue","operation","field","storageKey","linkedID","getLinkedRecordID","_this2","linkedIDs","getLinkedRecordIDs","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar RelayConcreteNode = require('../util/RelayConcreteNode');\n\nvar RelayModernRecord = require('./RelayModernRecord');\n\nvar RelayStoreUtils = require('./RelayStoreUtils');\n\nvar cloneRelayHandleSourceField = require('./cloneRelayHandleSourceField');\n\nvar invariant = require(\"fbjs/lib/invariant\");\n\nvar CONDITION = RelayConcreteNode.CONDITION,\n    CLIENT_EXTENSION = RelayConcreteNode.CLIENT_EXTENSION,\n    DEFER = RelayConcreteNode.DEFER,\n    FRAGMENT_SPREAD = RelayConcreteNode.FRAGMENT_SPREAD,\n    INLINE_FRAGMENT = RelayConcreteNode.INLINE_FRAGMENT,\n    LINKED_FIELD = RelayConcreteNode.LINKED_FIELD,\n    MODULE_IMPORT = RelayConcreteNode.MODULE_IMPORT,\n    LINKED_HANDLE = RelayConcreteNode.LINKED_HANDLE,\n    SCALAR_FIELD = RelayConcreteNode.SCALAR_FIELD,\n    SCALAR_HANDLE = RelayConcreteNode.SCALAR_HANDLE,\n    STREAM = RelayConcreteNode.STREAM;\nvar getStorageKey = RelayStoreUtils.getStorageKey,\n    getModuleOperationKey = RelayStoreUtils.getModuleOperationKey;\n\nfunction mark(recordSource, selector, references, operationLoader) {\n  var dataID = selector.dataID,\n      node = selector.node,\n      variables = selector.variables;\n  var marker = new RelayReferenceMarker(recordSource, variables, references, operationLoader);\n  marker.mark(node, dataID);\n}\n/**\n * @private\n */\n\n\nvar RelayReferenceMarker =\n/*#__PURE__*/\nfunction () {\n  function RelayReferenceMarker(recordSource, variables, references, operationLoader) {\n    var _operationLoader;\n\n    this._operationLoader = (_operationLoader = operationLoader) !== null && _operationLoader !== void 0 ? _operationLoader : null;\n    this._recordSource = recordSource;\n    this._references = references;\n    this._variables = variables;\n  }\n\n  var _proto = RelayReferenceMarker.prototype;\n\n  _proto.mark = function mark(node, dataID) {\n    this._traverse(node, dataID);\n  };\n\n  _proto._traverse = function _traverse(node, dataID) {\n    this._references.add(dataID);\n\n    var record = this._recordSource.get(dataID);\n\n    if (record == null) {\n      return;\n    }\n\n    this._traverseSelections(node.selections, record);\n  };\n\n  _proto._getVariableValue = function _getVariableValue(name) {\n    !this._variables.hasOwnProperty(name) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayReferenceMarker(): Undefined variable `%s`.', name) : invariant(false) : void 0;\n    return this._variables[name];\n  };\n\n  _proto._traverseSelections = function _traverseSelections(selections, record) {\n    var _this = this;\n\n    selections.forEach(function (selection) {\n      /* eslint-disable no-fallthrough */\n      switch (selection.kind) {\n        case LINKED_FIELD:\n          if (selection.plural) {\n            _this._traversePluralLink(selection, record);\n          } else {\n            _this._traverseLink(selection, record);\n          }\n\n          break;\n\n        case CONDITION:\n          var conditionValue = _this._getVariableValue(selection.condition);\n\n          if (conditionValue === selection.passingValue) {\n            _this._traverseSelections(selection.selections, record);\n          }\n\n          break;\n\n        case INLINE_FRAGMENT:\n          var typeName = RelayModernRecord.getType(record);\n\n          if (typeName != null && typeName === selection.type) {\n            _this._traverseSelections(selection.selections, record);\n          }\n\n          break;\n\n        case FRAGMENT_SPREAD:\n          !false ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayReferenceMarker(): Unexpected fragment spread `...%s`, ' + 'expected all fragments to be inlined.', selection.name) : invariant(false) : void 0;\n\n        case LINKED_HANDLE:\n          // The selections for a \"handle\" field are the same as those of the\n          // original linked field where the handle was applied. Reference marking\n          // therefore requires traversing the original field selections against\n          // the synthesized client field.\n          //\n          // TODO: Instead of finding the source field in `selections`, change\n          // the concrete structure to allow shared subtrees, and have the linked\n          // handle directly refer to the same selections as the LinkedField that\n          // it was split from.\n          var handleField = cloneRelayHandleSourceField(selection, selections, _this._variables);\n\n          if (handleField.plural) {\n            _this._traversePluralLink(handleField, record);\n          } else {\n            _this._traverseLink(handleField, record);\n          }\n\n          break;\n\n        case DEFER:\n        case STREAM:\n          _this._traverseSelections(selection.selections, record);\n\n          break;\n\n        case SCALAR_FIELD:\n        case SCALAR_HANDLE:\n          break;\n\n        case MODULE_IMPORT:\n          _this._traverseModuleImport(selection, record);\n\n          break;\n\n        case CLIENT_EXTENSION:\n          _this._traverseSelections(selection.selections, record);\n\n          break;\n\n        default:\n          selection;\n          !false ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayReferenceMarker: Unknown AST node `%s`.', selection) : invariant(false) : void 0;\n      }\n    });\n  };\n\n  _proto._traverseModuleImport = function _traverseModuleImport(moduleImport, record) {\n    var operationLoader = this._operationLoader;\n    !(operationLoader !== null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayReferenceMarker: Expected an operationLoader to be configured when using `@module`.') : invariant(false) : void 0;\n    var operationKey = getModuleOperationKey(moduleImport.documentName);\n    var operationReference = RelayModernRecord.getValue(record, operationKey);\n\n    if (operationReference == null) {\n      return;\n    }\n\n    var operation = operationLoader.get(operationReference);\n\n    if (operation != null) {\n      this._traverseSelections(operation.selections, record);\n    } // Otherwise, if the operation is not available, we assume that the data\n    // cannot have been processed yet and therefore isn't in the store to\n    // begin with.\n\n  };\n\n  _proto._traverseLink = function _traverseLink(field, record) {\n    var storageKey = getStorageKey(field, this._variables);\n    var linkedID = RelayModernRecord.getLinkedRecordID(record, storageKey);\n\n    if (linkedID == null) {\n      return;\n    }\n\n    this._traverse(field, linkedID);\n  };\n\n  _proto._traversePluralLink = function _traversePluralLink(field, record) {\n    var _this2 = this;\n\n    var storageKey = getStorageKey(field, this._variables);\n    var linkedIDs = RelayModernRecord.getLinkedRecordIDs(record, storageKey);\n\n    if (linkedIDs == null) {\n      return;\n    }\n\n    linkedIDs.forEach(function (linkedID) {\n      if (linkedID != null) {\n        _this2._traverse(field, linkedID);\n      }\n    });\n  };\n\n  return RelayReferenceMarker;\n}();\n\nmodule.exports = {\n  mark: mark\n};"]},"metadata":{},"sourceType":"script"}