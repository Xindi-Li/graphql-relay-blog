{"ast":null,"code":"import { Environment, Network, RecordSource, Store } from 'relay-runtime';\n\nfunction fetchQuery(operation, variables) {\n  return fetch('http://localhost:5000/backend', {\n    method: 'POST',\n    headers: {\n      Accept: \"application/json\",\n      'content-type': 'application/json'\n    },\n    body: JSON.stringify({\n      query: operation.text,\n      // GraphQL text from input\n      variables\n    })\n  }).then(response => response.json());\n}\n\nconst source = new RecordSource();\nconst store = new Store(source);\nconst network = Network.create(fetchQuery);\nconst environment = new Environment({\n  network,\n  store\n});\nexport default environment;","map":{"version":3,"sources":["/Users/xindi/xindi/graphql-relay-blog/frontend/src/Environment.js"],"names":["Environment","Network","RecordSource","Store","fetchQuery","operation","variables","fetch","method","headers","Accept","body","JSON","stringify","query","text","then","response","json","source","store","network","create","environment"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,OAAtB,EAA+BC,YAA/B,EAA6CC,KAA7C,QAA0D,eAA1D;;AAEA,SAASC,UAAT,CAAoBC,SAApB,EAA+BC,SAA/B,EAA0C;AACtC,SAAOC,KAAK,CAAC,+BAAD,EAAkC;AAC1CC,IAAAA,MAAM,EAAE,MADkC;AAE1CC,IAAAA,OAAO,EAAE;AACLC,MAAAA,MAAM,EAAE,kBADH;AAEL,sBAAgB;AAFX,KAFiC;AAM1CC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBC,MAAAA,KAAK,EAAET,SAAS,CAACU,IADA;AACM;AACvBT,MAAAA;AAFiB,KAAf;AANoC,GAAlC,CAAL,CAUJU,IAVI,CAUCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAVb,CAAP;AAWH;;AAED,MAAMC,MAAM,GAAG,IAAIjB,YAAJ,EAAf;AACA,MAAMkB,KAAK,GAAG,IAAIjB,KAAJ,CAAUgB,MAAV,CAAd;AACA,MAAME,OAAO,GAAGpB,OAAO,CAACqB,MAAR,CAAelB,UAAf,CAAhB;AAEA,MAAMmB,WAAW,GAAG,IAAIvB,WAAJ,CAAgB;AAChCqB,EAAAA,OADgC;AAEhCD,EAAAA;AAFgC,CAAhB,CAApB;AAKA,eAAeG,WAAf","sourcesContent":["import { Environment, Network, RecordSource, Store } from 'relay-runtime';\n\nfunction fetchQuery(operation, variables) {\n    return fetch('http://localhost:5000/backend', {\n        method: 'POST',\n        headers: {\n            Accept: \"application/json\",\n            'content-type': 'application/json',\n        },\n        body: JSON.stringify({\n            query: operation.text, // GraphQL text from input\n            variables\n        }),\n    }).then(response => response.json());\n}\n\nconst source = new RecordSource();\nconst store = new Store(source);\nconst network = Network.create(fetchQuery);\n\nconst environment = new Environment({\n    network,\n    store,\n});\n\nexport default environment;"]},"metadata":{},"sourceType":"module"}