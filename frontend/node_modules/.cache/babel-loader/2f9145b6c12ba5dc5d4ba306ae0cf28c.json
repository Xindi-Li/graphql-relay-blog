{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar RelayModernRecord = require('./RelayModernRecord');\n\nvar invariant = require(\"fbjs/lib/invariant\");\n\nvar _require = require('../util/RelayConcreteNode'),\n    CLIENT_EXTENSION = _require.CLIENT_EXTENSION,\n    CONDITION = _require.CONDITION,\n    DEFER = _require.DEFER,\n    FRAGMENT_SPREAD = _require.FRAGMENT_SPREAD,\n    INLINE_DATA_FRAGMENT_SPREAD = _require.INLINE_DATA_FRAGMENT_SPREAD,\n    INLINE_FRAGMENT = _require.INLINE_FRAGMENT,\n    LINKED_FIELD = _require.LINKED_FIELD,\n    MODULE_IMPORT = _require.MODULE_IMPORT,\n    SCALAR_FIELD = _require.SCALAR_FIELD,\n    STREAM = _require.STREAM;\n\nvar _require2 = require('./RelayStoreUtils'),\n    FRAGMENTS_KEY = _require2.FRAGMENTS_KEY,\n    FRAGMENT_OWNER_KEY = _require2.FRAGMENT_OWNER_KEY,\n    FRAGMENT_PROP_NAME_KEY = _require2.FRAGMENT_PROP_NAME_KEY,\n    ID_KEY = _require2.ID_KEY,\n    MODULE_COMPONENT_KEY = _require2.MODULE_COMPONENT_KEY,\n    getArgumentValues = _require2.getArgumentValues,\n    getStorageKey = _require2.getStorageKey,\n    getModuleComponentKey = _require2.getModuleComponentKey;\n\nfunction read(recordSource, selector) {\n  var reader = new RelayReader(recordSource, selector);\n  return reader.read();\n}\n/**\n * @private\n */\n\n\nvar RelayReader =\n/*#__PURE__*/\nfunction () {\n  function RelayReader(recordSource, selector) {\n    this._isMissingData = false;\n    this._owner = selector.owner;\n    this._recordSource = recordSource;\n    this._seenRecords = {};\n    this._selector = selector;\n    this._variables = selector.variables;\n  }\n\n  var _proto = RelayReader.prototype;\n\n  _proto.read = function read() {\n    var _this$_selector = this._selector,\n        node = _this$_selector.node,\n        dataID = _this$_selector.dataID;\n\n    var data = this._traverse(node, dataID, null);\n\n    return {\n      data: data,\n      isMissingData: this._isMissingData,\n      seenRecords: this._seenRecords,\n      selector: this._selector\n    };\n  };\n\n  _proto._traverse = function _traverse(node, dataID, prevData) {\n    var record = this._recordSource.get(dataID);\n\n    this._seenRecords[dataID] = record;\n\n    if (record == null) {\n      if (record === undefined) {\n        this._isMissingData = true;\n      }\n\n      return record;\n    }\n\n    var data = prevData || {};\n\n    this._traverseSelections(node.selections, record, data);\n\n    return data;\n  };\n\n  _proto._getVariableValue = function _getVariableValue(name) {\n    !this._variables.hasOwnProperty(name) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayReader(): Undefined variable `%s`.', name) : invariant(false) : void 0;\n    return this._variables[name];\n  };\n\n  _proto._traverseSelections = function _traverseSelections(selections, record, data) {\n    for (var i = 0; i < selections.length; i++) {\n      var selection = selections[i];\n\n      switch (selection.kind) {\n        case SCALAR_FIELD:\n          this._readScalar(selection, record, data);\n\n          break;\n\n        case LINKED_FIELD:\n          if (selection.plural) {\n            this._readPluralLink(selection, record, data);\n          } else {\n            this._readLink(selection, record, data);\n          }\n\n          break;\n\n        case CONDITION:\n          var conditionValue = this._getVariableValue(selection.condition);\n\n          if (conditionValue === selection.passingValue) {\n            this._traverseSelections(selection.selections, record, data);\n          }\n\n          break;\n\n        case INLINE_FRAGMENT:\n          var typeName = RelayModernRecord.getType(record);\n\n          if (typeName != null && typeName === selection.type) {\n            this._traverseSelections(selection.selections, record, data);\n          }\n\n          break;\n\n        case FRAGMENT_SPREAD:\n          this._createFragmentPointer(selection, record, data);\n\n          break;\n\n        case MODULE_IMPORT:\n          this._readModuleImport(selection, record, data);\n\n          break;\n\n        case INLINE_DATA_FRAGMENT_SPREAD:\n          this._createInlineDataFragmentPointer(selection, record, data);\n\n          break;\n\n        case DEFER:\n        case CLIENT_EXTENSION:\n          var isMissingData = this._isMissingData;\n\n          this._traverseSelections(selection.selections, record, data);\n\n          this._isMissingData = isMissingData;\n          break;\n\n        case STREAM:\n          this._traverseSelections(selection.selections, record, data);\n\n          break;\n\n        default:\n          selection;\n          !false ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayReader(): Unexpected ast kind `%s`.', selection.kind) : invariant(false) : void 0;\n      }\n    }\n  };\n\n  _proto._readScalar = function _readScalar(field, record, data) {\n    var _field$alias;\n\n    var applicationName = (_field$alias = field.alias) !== null && _field$alias !== void 0 ? _field$alias : field.name;\n    var storageKey = getStorageKey(field, this._variables);\n    var value = RelayModernRecord.getValue(record, storageKey);\n\n    if (value === undefined) {\n      this._isMissingData = true;\n    }\n\n    data[applicationName] = value;\n  };\n\n  _proto._readLink = function _readLink(field, record, data) {\n    var _field$alias2;\n\n    var applicationName = (_field$alias2 = field.alias) !== null && _field$alias2 !== void 0 ? _field$alias2 : field.name;\n    var storageKey = getStorageKey(field, this._variables);\n    var linkedID = RelayModernRecord.getLinkedRecordID(record, storageKey);\n\n    if (linkedID == null) {\n      data[applicationName] = linkedID;\n\n      if (linkedID === undefined) {\n        this._isMissingData = true;\n      }\n\n      return;\n    }\n\n    var prevData = data[applicationName];\n    !(prevData == null || typeof prevData === 'object') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayReader(): Expected data for field `%s` on record `%s` ' + 'to be an object, got `%s`.', applicationName, RelayModernRecord.getDataID(record), prevData) : invariant(false) : void 0;\n    /* $FlowFixMe(>=0.98.0 site=www,mobile,react_native_fb,oss) This comment\n     * suppresses an error found when Flow v0.98 was deployed. To see the error\n     * delete this comment and run Flow. */\n\n    data[applicationName] = this._traverse(field, linkedID, prevData);\n  };\n\n  _proto._readPluralLink = function _readPluralLink(field, record, data) {\n    var _this = this;\n\n    var _field$alias3;\n\n    var applicationName = (_field$alias3 = field.alias) !== null && _field$alias3 !== void 0 ? _field$alias3 : field.name;\n    var storageKey = getStorageKey(field, this._variables);\n    var linkedIDs = RelayModernRecord.getLinkedRecordIDs(record, storageKey);\n\n    if (linkedIDs == null) {\n      data[applicationName] = linkedIDs;\n\n      if (linkedIDs === undefined) {\n        this._isMissingData = true;\n      }\n\n      return;\n    }\n\n    var prevData = data[applicationName];\n    !(prevData == null || Array.isArray(prevData)) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayReader(): Expected data for field `%s` on record `%s` ' + 'to be an array, got `%s`.', applicationName, RelayModernRecord.getDataID(record), prevData) : invariant(false) : void 0;\n    var linkedArray = prevData || [];\n    linkedIDs.forEach(function (linkedID, nextIndex) {\n      if (linkedID == null) {\n        if (linkedID === undefined) {\n          _this._isMissingData = true;\n        }\n        /* $FlowFixMe(>=0.98.0 site=www,mobile,react_native_fb,oss) This comment\n         * suppresses an error found when Flow v0.98 was deployed. To see the\n         * error delete this comment and run Flow. */\n\n\n        linkedArray[nextIndex] = linkedID;\n        return;\n      }\n\n      var prevItem = linkedArray[nextIndex];\n      !(prevItem == null || typeof prevItem === 'object') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayReader(): Expected data for field `%s` on record `%s` ' + 'to be an object, got `%s`.', applicationName, RelayModernRecord.getDataID(record), prevItem) : invariant(false) : void 0;\n      /* $FlowFixMe(>=0.98.0 site=www,mobile,react_native_fb,oss) This comment\n       * suppresses an error found when Flow v0.98 was deployed. To see the\n       * error delete this comment and run Flow. */\n\n      linkedArray[nextIndex] = _this._traverse(field, linkedID, prevItem);\n    });\n    data[applicationName] = linkedArray;\n  }\n  /**\n   * Reads a ReaderModuleImport, which was generated from using the @module\n   * directive.\n   */\n  ;\n\n  _proto._readModuleImport = function _readModuleImport(moduleImport, record, data) {\n    // Determine the component module from the store: if the field is missing\n    // it means we don't know what component to render the match with.\n    var componentKey = getModuleComponentKey(moduleImport.documentName);\n    var component = RelayModernRecord.getValue(record, componentKey);\n\n    if (component == null) {\n      if (component === undefined) {\n        this._isMissingData = true;\n      }\n\n      return;\n    } // Otherwise, read the fragment and module associated to the concrete\n    // type, and put that data with the result:\n    // - For the matched fragment, create the relevant fragment pointer and add\n    //   the expected fragmentPropName\n    // - For the matched module, create a reference to the module\n\n\n    this._createFragmentPointer({\n      kind: 'FragmentSpread',\n      name: moduleImport.fragmentName,\n      args: null\n    }, record, data);\n\n    data[FRAGMENT_PROP_NAME_KEY] = moduleImport.fragmentPropName;\n    data[MODULE_COMPONENT_KEY] = component;\n  };\n\n  _proto._createFragmentPointer = function _createFragmentPointer(fragmentSpread, record, data) {\n    var fragmentPointers = data[FRAGMENTS_KEY];\n\n    if (fragmentPointers == null) {\n      fragmentPointers = data[FRAGMENTS_KEY] = {};\n    }\n\n    !(typeof fragmentPointers === 'object' && fragmentPointers != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayReader: Expected fragment spread data to be an object, got `%s`.', fragmentPointers) : invariant(false) : void 0;\n\n    if (data[ID_KEY] == null) {\n      data[ID_KEY] = RelayModernRecord.getDataID(record);\n    } // $FlowFixMe - writing into read-only field\n\n\n    fragmentPointers[fragmentSpread.name] = fragmentSpread.args ? getArgumentValues(fragmentSpread.args, this._variables) : {};\n    data[FRAGMENT_OWNER_KEY] = this._owner;\n  };\n\n  _proto._createInlineDataFragmentPointer = function _createInlineDataFragmentPointer(inlineDataFragmentSpread, record, data) {\n    var fragmentPointers = data[FRAGMENTS_KEY];\n\n    if (fragmentPointers == null) {\n      fragmentPointers = data[FRAGMENTS_KEY] = {};\n    }\n\n    !(typeof fragmentPointers === 'object' && fragmentPointers != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayReader: Expected fragment spread data to be an object, got `%s`.', fragmentPointers) : invariant(false) : void 0;\n\n    if (data[ID_KEY] == null) {\n      data[ID_KEY] = RelayModernRecord.getDataID(record);\n    }\n\n    var inlineData = {};\n\n    this._traverseSelections(inlineDataFragmentSpread.selections, record, inlineData); // $FlowFixMe - writing into read-only field\n\n\n    fragmentPointers[inlineDataFragmentSpread.name] = inlineData;\n  };\n\n  return RelayReader;\n}();\n\nmodule.exports = {\n  read: read\n};","map":{"version":3,"sources":["/Users/xindi/xindi/graphql-relay-blog/frontend/node_modules/relay-runtime/lib/store/RelayReader.js"],"names":["RelayModernRecord","require","invariant","_require","CLIENT_EXTENSION","CONDITION","DEFER","FRAGMENT_SPREAD","INLINE_DATA_FRAGMENT_SPREAD","INLINE_FRAGMENT","LINKED_FIELD","MODULE_IMPORT","SCALAR_FIELD","STREAM","_require2","FRAGMENTS_KEY","FRAGMENT_OWNER_KEY","FRAGMENT_PROP_NAME_KEY","ID_KEY","MODULE_COMPONENT_KEY","getArgumentValues","getStorageKey","getModuleComponentKey","read","recordSource","selector","reader","RelayReader","_isMissingData","_owner","owner","_recordSource","_seenRecords","_selector","_variables","variables","_proto","prototype","_this$_selector","node","dataID","data","_traverse","isMissingData","seenRecords","prevData","record","get","undefined","_traverseSelections","selections","_getVariableValue","name","hasOwnProperty","process","env","NODE_ENV","i","length","selection","kind","_readScalar","plural","_readPluralLink","_readLink","conditionValue","condition","passingValue","typeName","getType","type","_createFragmentPointer","_readModuleImport","_createInlineDataFragmentPointer","field","_field$alias","applicationName","alias","storageKey","value","getValue","_field$alias2","linkedID","getLinkedRecordID","getDataID","_this","_field$alias3","linkedIDs","getLinkedRecordIDs","Array","isArray","linkedArray","forEach","nextIndex","prevItem","moduleImport","componentKey","documentName","component","fragmentName","args","fragmentPropName","fragmentSpread","fragmentPointers","inlineDataFragmentSpread","inlineData","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar RelayModernRecord = require('./RelayModernRecord');\n\nvar invariant = require(\"fbjs/lib/invariant\");\n\nvar _require = require('../util/RelayConcreteNode'),\n    CLIENT_EXTENSION = _require.CLIENT_EXTENSION,\n    CONDITION = _require.CONDITION,\n    DEFER = _require.DEFER,\n    FRAGMENT_SPREAD = _require.FRAGMENT_SPREAD,\n    INLINE_DATA_FRAGMENT_SPREAD = _require.INLINE_DATA_FRAGMENT_SPREAD,\n    INLINE_FRAGMENT = _require.INLINE_FRAGMENT,\n    LINKED_FIELD = _require.LINKED_FIELD,\n    MODULE_IMPORT = _require.MODULE_IMPORT,\n    SCALAR_FIELD = _require.SCALAR_FIELD,\n    STREAM = _require.STREAM;\n\nvar _require2 = require('./RelayStoreUtils'),\n    FRAGMENTS_KEY = _require2.FRAGMENTS_KEY,\n    FRAGMENT_OWNER_KEY = _require2.FRAGMENT_OWNER_KEY,\n    FRAGMENT_PROP_NAME_KEY = _require2.FRAGMENT_PROP_NAME_KEY,\n    ID_KEY = _require2.ID_KEY,\n    MODULE_COMPONENT_KEY = _require2.MODULE_COMPONENT_KEY,\n    getArgumentValues = _require2.getArgumentValues,\n    getStorageKey = _require2.getStorageKey,\n    getModuleComponentKey = _require2.getModuleComponentKey;\n\nfunction read(recordSource, selector) {\n  var reader = new RelayReader(recordSource, selector);\n  return reader.read();\n}\n/**\n * @private\n */\n\n\nvar RelayReader =\n/*#__PURE__*/\nfunction () {\n  function RelayReader(recordSource, selector) {\n    this._isMissingData = false;\n    this._owner = selector.owner;\n    this._recordSource = recordSource;\n    this._seenRecords = {};\n    this._selector = selector;\n    this._variables = selector.variables;\n  }\n\n  var _proto = RelayReader.prototype;\n\n  _proto.read = function read() {\n    var _this$_selector = this._selector,\n        node = _this$_selector.node,\n        dataID = _this$_selector.dataID;\n\n    var data = this._traverse(node, dataID, null);\n\n    return {\n      data: data,\n      isMissingData: this._isMissingData,\n      seenRecords: this._seenRecords,\n      selector: this._selector\n    };\n  };\n\n  _proto._traverse = function _traverse(node, dataID, prevData) {\n    var record = this._recordSource.get(dataID);\n\n    this._seenRecords[dataID] = record;\n\n    if (record == null) {\n      if (record === undefined) {\n        this._isMissingData = true;\n      }\n\n      return record;\n    }\n\n    var data = prevData || {};\n\n    this._traverseSelections(node.selections, record, data);\n\n    return data;\n  };\n\n  _proto._getVariableValue = function _getVariableValue(name) {\n    !this._variables.hasOwnProperty(name) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayReader(): Undefined variable `%s`.', name) : invariant(false) : void 0;\n    return this._variables[name];\n  };\n\n  _proto._traverseSelections = function _traverseSelections(selections, record, data) {\n    for (var i = 0; i < selections.length; i++) {\n      var selection = selections[i];\n\n      switch (selection.kind) {\n        case SCALAR_FIELD:\n          this._readScalar(selection, record, data);\n\n          break;\n\n        case LINKED_FIELD:\n          if (selection.plural) {\n            this._readPluralLink(selection, record, data);\n          } else {\n            this._readLink(selection, record, data);\n          }\n\n          break;\n\n        case CONDITION:\n          var conditionValue = this._getVariableValue(selection.condition);\n\n          if (conditionValue === selection.passingValue) {\n            this._traverseSelections(selection.selections, record, data);\n          }\n\n          break;\n\n        case INLINE_FRAGMENT:\n          var typeName = RelayModernRecord.getType(record);\n\n          if (typeName != null && typeName === selection.type) {\n            this._traverseSelections(selection.selections, record, data);\n          }\n\n          break;\n\n        case FRAGMENT_SPREAD:\n          this._createFragmentPointer(selection, record, data);\n\n          break;\n\n        case MODULE_IMPORT:\n          this._readModuleImport(selection, record, data);\n\n          break;\n\n        case INLINE_DATA_FRAGMENT_SPREAD:\n          this._createInlineDataFragmentPointer(selection, record, data);\n\n          break;\n\n        case DEFER:\n        case CLIENT_EXTENSION:\n          var isMissingData = this._isMissingData;\n\n          this._traverseSelections(selection.selections, record, data);\n\n          this._isMissingData = isMissingData;\n          break;\n\n        case STREAM:\n          this._traverseSelections(selection.selections, record, data);\n\n          break;\n\n        default:\n          selection;\n          !false ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayReader(): Unexpected ast kind `%s`.', selection.kind) : invariant(false) : void 0;\n      }\n    }\n  };\n\n  _proto._readScalar = function _readScalar(field, record, data) {\n    var _field$alias;\n\n    var applicationName = (_field$alias = field.alias) !== null && _field$alias !== void 0 ? _field$alias : field.name;\n    var storageKey = getStorageKey(field, this._variables);\n    var value = RelayModernRecord.getValue(record, storageKey);\n\n    if (value === undefined) {\n      this._isMissingData = true;\n    }\n\n    data[applicationName] = value;\n  };\n\n  _proto._readLink = function _readLink(field, record, data) {\n    var _field$alias2;\n\n    var applicationName = (_field$alias2 = field.alias) !== null && _field$alias2 !== void 0 ? _field$alias2 : field.name;\n    var storageKey = getStorageKey(field, this._variables);\n    var linkedID = RelayModernRecord.getLinkedRecordID(record, storageKey);\n\n    if (linkedID == null) {\n      data[applicationName] = linkedID;\n\n      if (linkedID === undefined) {\n        this._isMissingData = true;\n      }\n\n      return;\n    }\n\n    var prevData = data[applicationName];\n    !(prevData == null || typeof prevData === 'object') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayReader(): Expected data for field `%s` on record `%s` ' + 'to be an object, got `%s`.', applicationName, RelayModernRecord.getDataID(record), prevData) : invariant(false) : void 0;\n    /* $FlowFixMe(>=0.98.0 site=www,mobile,react_native_fb,oss) This comment\n     * suppresses an error found when Flow v0.98 was deployed. To see the error\n     * delete this comment and run Flow. */\n\n    data[applicationName] = this._traverse(field, linkedID, prevData);\n  };\n\n  _proto._readPluralLink = function _readPluralLink(field, record, data) {\n    var _this = this;\n\n    var _field$alias3;\n\n    var applicationName = (_field$alias3 = field.alias) !== null && _field$alias3 !== void 0 ? _field$alias3 : field.name;\n    var storageKey = getStorageKey(field, this._variables);\n    var linkedIDs = RelayModernRecord.getLinkedRecordIDs(record, storageKey);\n\n    if (linkedIDs == null) {\n      data[applicationName] = linkedIDs;\n\n      if (linkedIDs === undefined) {\n        this._isMissingData = true;\n      }\n\n      return;\n    }\n\n    var prevData = data[applicationName];\n    !(prevData == null || Array.isArray(prevData)) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayReader(): Expected data for field `%s` on record `%s` ' + 'to be an array, got `%s`.', applicationName, RelayModernRecord.getDataID(record), prevData) : invariant(false) : void 0;\n    var linkedArray = prevData || [];\n    linkedIDs.forEach(function (linkedID, nextIndex) {\n      if (linkedID == null) {\n        if (linkedID === undefined) {\n          _this._isMissingData = true;\n        }\n        /* $FlowFixMe(>=0.98.0 site=www,mobile,react_native_fb,oss) This comment\n         * suppresses an error found when Flow v0.98 was deployed. To see the\n         * error delete this comment and run Flow. */\n\n\n        linkedArray[nextIndex] = linkedID;\n        return;\n      }\n\n      var prevItem = linkedArray[nextIndex];\n      !(prevItem == null || typeof prevItem === 'object') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayReader(): Expected data for field `%s` on record `%s` ' + 'to be an object, got `%s`.', applicationName, RelayModernRecord.getDataID(record), prevItem) : invariant(false) : void 0;\n      /* $FlowFixMe(>=0.98.0 site=www,mobile,react_native_fb,oss) This comment\n       * suppresses an error found when Flow v0.98 was deployed. To see the\n       * error delete this comment and run Flow. */\n\n      linkedArray[nextIndex] = _this._traverse(field, linkedID, prevItem);\n    });\n    data[applicationName] = linkedArray;\n  }\n  /**\n   * Reads a ReaderModuleImport, which was generated from using the @module\n   * directive.\n   */\n  ;\n\n  _proto._readModuleImport = function _readModuleImport(moduleImport, record, data) {\n    // Determine the component module from the store: if the field is missing\n    // it means we don't know what component to render the match with.\n    var componentKey = getModuleComponentKey(moduleImport.documentName);\n    var component = RelayModernRecord.getValue(record, componentKey);\n\n    if (component == null) {\n      if (component === undefined) {\n        this._isMissingData = true;\n      }\n\n      return;\n    } // Otherwise, read the fragment and module associated to the concrete\n    // type, and put that data with the result:\n    // - For the matched fragment, create the relevant fragment pointer and add\n    //   the expected fragmentPropName\n    // - For the matched module, create a reference to the module\n\n\n    this._createFragmentPointer({\n      kind: 'FragmentSpread',\n      name: moduleImport.fragmentName,\n      args: null\n    }, record, data);\n\n    data[FRAGMENT_PROP_NAME_KEY] = moduleImport.fragmentPropName;\n    data[MODULE_COMPONENT_KEY] = component;\n  };\n\n  _proto._createFragmentPointer = function _createFragmentPointer(fragmentSpread, record, data) {\n    var fragmentPointers = data[FRAGMENTS_KEY];\n\n    if (fragmentPointers == null) {\n      fragmentPointers = data[FRAGMENTS_KEY] = {};\n    }\n\n    !(typeof fragmentPointers === 'object' && fragmentPointers != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayReader: Expected fragment spread data to be an object, got `%s`.', fragmentPointers) : invariant(false) : void 0;\n\n    if (data[ID_KEY] == null) {\n      data[ID_KEY] = RelayModernRecord.getDataID(record);\n    } // $FlowFixMe - writing into read-only field\n\n\n    fragmentPointers[fragmentSpread.name] = fragmentSpread.args ? getArgumentValues(fragmentSpread.args, this._variables) : {};\n    data[FRAGMENT_OWNER_KEY] = this._owner;\n  };\n\n  _proto._createInlineDataFragmentPointer = function _createInlineDataFragmentPointer(inlineDataFragmentSpread, record, data) {\n    var fragmentPointers = data[FRAGMENTS_KEY];\n\n    if (fragmentPointers == null) {\n      fragmentPointers = data[FRAGMENTS_KEY] = {};\n    }\n\n    !(typeof fragmentPointers === 'object' && fragmentPointers != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayReader: Expected fragment spread data to be an object, got `%s`.', fragmentPointers) : invariant(false) : void 0;\n\n    if (data[ID_KEY] == null) {\n      data[ID_KEY] = RelayModernRecord.getDataID(record);\n    }\n\n    var inlineData = {};\n\n    this._traverseSelections(inlineDataFragmentSpread.selections, record, inlineData); // $FlowFixMe - writing into read-only field\n\n\n    fragmentPointers[inlineDataFragmentSpread.name] = inlineData;\n  };\n\n  return RelayReader;\n}();\n\nmodule.exports = {\n  read: read\n};"]},"metadata":{},"sourceType":"script"}