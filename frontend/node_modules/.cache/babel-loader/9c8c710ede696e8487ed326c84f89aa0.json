{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @emails oncall+relay\n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar RelayDefaultHandlerProvider = require('../handlers/RelayDefaultHandlerProvider');\n\nvar RelayFeatureFlags = require('../util/RelayFeatureFlags');\n\nvar RelayModernQueryExecutor = require('./RelayModernQueryExecutor');\n\nvar RelayObservable = require('../network/RelayObservable');\n\nvar RelayOperationTracker = require('../store/RelayOperationTracker');\n\nvar RelayPublishQueue = require('./RelayPublishQueue');\n\nvar RelayRecordSource = require('./RelayRecordSource');\n\nvar defaultGetDataID = require('./defaultGetDataID');\n\nvar generateID = require('../util/generateID');\n\nvar invariant = require(\"fbjs/lib/invariant\");\n\nvar RelayModernEnvironment =\n/*#__PURE__*/\nfunction () {\n  function RelayModernEnvironment(config) {\n    var _this = this;\n\n    var _config$log, _config$UNSTABLE_defa, _config$UNSTABLE_DO_N, _config$scheduler, _config$operationTrac;\n\n    this.configName = config.configName;\n    var handlerProvider = config.handlerProvider ? config.handlerProvider : RelayDefaultHandlerProvider;\n    var operationLoader = config.operationLoader;\n\n    if (process.env.NODE_ENV !== \"production\") {\n      if (operationLoader != null) {\n        !(typeof operationLoader === 'object' && typeof operationLoader.get === 'function' && typeof operationLoader.load === 'function') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayModernEnvironment: Expected `operationLoader` to be an object ' + 'with get() and load() functions, got `%s`.', operationLoader) : invariant(false) : void 0;\n      }\n    }\n\n    this.__log = (_config$log = config.log) !== null && _config$log !== void 0 ? _config$log : emptyFunction;\n    this._defaultRenderPolicy = ((_config$UNSTABLE_defa = config.UNSTABLE_defaultRenderPolicy) !== null && _config$UNSTABLE_defa !== void 0 ? _config$UNSTABLE_defa : RelayFeatureFlags.ENABLE_PARTIAL_RENDERING_DEFAULT === true) ? 'partial' : 'full';\n    this._operationLoader = operationLoader;\n    this._operationExecutions = new Map();\n    this._network = config.network;\n    this._getDataID = (_config$UNSTABLE_DO_N = config.UNSTABLE_DO_NOT_USE_getDataID) !== null && _config$UNSTABLE_DO_N !== void 0 ? _config$UNSTABLE_DO_N : defaultGetDataID;\n    this._publishQueue = new RelayPublishQueue(config.store, handlerProvider, this._getDataID);\n    this._scheduler = (_config$scheduler = config.scheduler) !== null && _config$scheduler !== void 0 ? _config$scheduler : null;\n    this._store = config.store;\n    this.options = config.options;\n\n    this.__setNet = function (newNet) {\n      return _this._network = newNet;\n    };\n\n    if (process.env.NODE_ENV !== \"production\") {\n      var _require = require('./StoreInspector'),\n          inspect = _require.inspect;\n\n      this.DEBUG_inspect = function (dataID) {\n        return inspect(_this, dataID);\n      };\n    } // Register this Relay Environment with Relay DevTools if it exists.\n    // Note: this must always be the last step in the constructor.\n\n\n    var _global = typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : undefined;\n\n    var devToolsHook = _global && _global.__RELAY_DEVTOOLS_HOOK__;\n\n    if (devToolsHook) {\n      devToolsHook.registerEnvironment(this);\n    }\n\n    this._missingFieldHandlers = config.missingFieldHandlers;\n    this._operationTracker = (_config$operationTrac = config.operationTracker) !== null && _config$operationTrac !== void 0 ? _config$operationTrac : new RelayOperationTracker();\n  }\n\n  var _proto = RelayModernEnvironment.prototype;\n\n  _proto.getStore = function getStore() {\n    return this._store;\n  };\n\n  _proto.getNetwork = function getNetwork() {\n    return this._network;\n  };\n\n  _proto.getOperationTracker = function getOperationTracker() {\n    return this._operationTracker;\n  };\n\n  _proto.isRequestActive = function isRequestActive(requestIdentifier) {\n    var activeState = this._operationExecutions.get(requestIdentifier);\n\n    return activeState === 'active';\n  };\n\n  _proto.UNSTABLE_getDefaultRenderPolicy = function UNSTABLE_getDefaultRenderPolicy() {\n    return this._defaultRenderPolicy;\n  };\n\n  _proto.applyUpdate = function applyUpdate(optimisticUpdate) {\n    var _this2 = this;\n\n    var dispose = function dispose() {\n      _this2._publishQueue.revertUpdate(optimisticUpdate);\n\n      _this2._publishQueue.run();\n    };\n\n    this._publishQueue.applyUpdate(optimisticUpdate);\n\n    this._publishQueue.run();\n\n    return {\n      dispose: dispose\n    };\n  };\n\n  _proto.revertUpdate = function revertUpdate(update) {\n    this._publishQueue.revertUpdate(update);\n\n    this._publishQueue.run();\n  };\n\n  _proto.replaceUpdate = function replaceUpdate(update, newUpdate) {\n    this._publishQueue.revertUpdate(update);\n\n    this._publishQueue.applyUpdate(newUpdate);\n\n    this._publishQueue.run();\n  };\n\n  _proto.applyMutation = function applyMutation(optimisticConfig) {\n    var _this3 = this;\n\n    var subscription = RelayObservable.create(function (sink) {\n      var source = RelayObservable.create(function (_sink) {});\n      var executor = RelayModernQueryExecutor.execute({\n        operation: optimisticConfig.operation,\n        operationExecutions: _this3._operationExecutions,\n        operationLoader: _this3._operationLoader,\n        optimisticConfig: optimisticConfig,\n        publishQueue: _this3._publishQueue,\n        scheduler: _this3._scheduler,\n        sink: sink,\n        source: source,\n        store: _this3._store,\n        updater: null,\n        operationTracker: _this3._operationTracker,\n        getDataID: _this3._getDataID\n      });\n      return function () {\n        return executor.cancel();\n      };\n    }).subscribe({});\n    return {\n      dispose: function dispose() {\n        return subscription.unsubscribe();\n      }\n    };\n  };\n\n  _proto.check = function check(operation) {\n    if (this._missingFieldHandlers == null || this._missingFieldHandlers.length === 0) {\n      return this._store.check(operation);\n    }\n\n    return this._checkSelectorAndHandleMissingFields(operation, this._missingFieldHandlers);\n  };\n\n  _proto.commitPayload = function commitPayload(operation, payload) {\n    var _this4 = this;\n\n    RelayObservable.create(function (sink) {\n      var executor = RelayModernQueryExecutor.execute({\n        operation: operation,\n        operationExecutions: _this4._operationExecutions,\n        operationLoader: _this4._operationLoader,\n        optimisticConfig: null,\n        publishQueue: _this4._publishQueue,\n        scheduler: null,\n        // make sure the first payload is sync\n        sink: sink,\n        source: RelayObservable.from({\n          data: payload\n        }),\n        store: _this4._store,\n        updater: null,\n        operationTracker: _this4._operationTracker,\n        getDataID: _this4._getDataID,\n        isClientPayload: true\n      });\n      return function () {\n        return executor.cancel();\n      };\n    }).subscribe({});\n  };\n\n  _proto.commitUpdate = function commitUpdate(updater) {\n    this._publishQueue.commitUpdate(updater);\n\n    this._publishQueue.run();\n  };\n\n  _proto.lookup = function lookup(readSelector) {\n    return this._store.lookup(readSelector);\n  };\n\n  _proto.subscribe = function subscribe(snapshot, callback) {\n    return this._store.subscribe(snapshot, callback);\n  };\n\n  _proto.retain = function retain(operation) {\n    return this._store.retain(operation);\n  };\n\n  _proto._checkSelectorAndHandleMissingFields = function _checkSelectorAndHandleMissingFields(operation, handlers) {\n    var target = RelayRecordSource.create();\n\n    var result = this._store.check(operation, {\n      target: target,\n      handlers: handlers\n    });\n\n    if (target.size() > 0) {\n      this._publishQueue.commitSource(target);\n\n      this._publishQueue.run();\n    }\n\n    return result;\n  }\n  /**\n   * Returns an Observable of GraphQLResponse resulting from executing the\n   * provided Query or Subscription operation, each result of which is then\n   * normalized and committed to the publish queue.\n   *\n   * Note: Observables are lazy, so calling this method will do nothing until\n   * the result is subscribed to: environment.execute({...}).subscribe({...}).\n   */\n  ;\n\n  _proto.execute = function execute(_ref) {\n    var _this5 = this;\n\n    var operation = _ref.operation,\n        cacheConfig = _ref.cacheConfig,\n        updater = _ref.updater;\n\n    var _this$__createLogObse = this.__createLogObserver(operation.request.node.params, operation.request.variables),\n        logObserver = _this$__createLogObse[0],\n        logRequestInfo = _this$__createLogObse[1];\n\n    return RelayObservable.create(function (sink) {\n      var source = _this5._network.execute(operation.request.node.params, operation.request.variables, cacheConfig || {}, null, logRequestInfo);\n\n      var executor = RelayModernQueryExecutor.execute({\n        operation: operation,\n        operationExecutions: _this5._operationExecutions,\n        operationLoader: _this5._operationLoader,\n        optimisticConfig: null,\n        publishQueue: _this5._publishQueue,\n        scheduler: _this5._scheduler,\n        sink: sink,\n        source: source,\n        store: _this5._store,\n        updater: updater,\n        operationTracker: _this5._operationTracker,\n        getDataID: _this5._getDataID\n      });\n      return function () {\n        return executor.cancel();\n      };\n    })[\"do\"](logObserver);\n  }\n  /**\n   * Returns an Observable of GraphQLResponse resulting from executing the\n   * provided Mutation operation, the result of which is then normalized and\n   * committed to the publish queue along with an optional optimistic response\n   * or updater.\n   *\n   * Note: Observables are lazy, so calling this method will do nothing until\n   * the result is subscribed to:\n   * environment.executeMutation({...}).subscribe({...}).\n   */\n  ;\n\n  _proto.executeMutation = function executeMutation(_ref2) {\n    var _this6 = this;\n\n    var operation = _ref2.operation,\n        optimisticResponse = _ref2.optimisticResponse,\n        optimisticUpdater = _ref2.optimisticUpdater,\n        updater = _ref2.updater,\n        uploadables = _ref2.uploadables;\n\n    var _this$__createLogObse2 = this.__createLogObserver(operation.request.node.params, operation.request.variables),\n        logObserver = _this$__createLogObse2[0],\n        logRequestInfo = _this$__createLogObse2[1];\n\n    return RelayObservable.create(function (sink) {\n      var optimisticConfig;\n\n      if (optimisticResponse || optimisticUpdater) {\n        optimisticConfig = {\n          operation: operation,\n          response: optimisticResponse,\n          updater: optimisticUpdater\n        };\n      }\n\n      var source = _this6._network.execute(operation.request.node.params, operation.request.variables, {\n        force: true\n      }, uploadables, logRequestInfo);\n\n      var executor = RelayModernQueryExecutor.execute({\n        operation: operation,\n        operationExecutions: _this6._operationExecutions,\n        operationLoader: _this6._operationLoader,\n        optimisticConfig: optimisticConfig,\n        publishQueue: _this6._publishQueue,\n        scheduler: _this6._scheduler,\n        sink: sink,\n        source: source,\n        store: _this6._store,\n        updater: updater,\n        operationTracker: _this6._operationTracker,\n        getDataID: _this6._getDataID\n      });\n      return function () {\n        return executor.cancel();\n      };\n    })[\"do\"](logObserver);\n  }\n  /**\n   * Returns an Observable of GraphQLResponse resulting from executing the\n   * provided Query or Subscription operation responses, the result of which is\n   * then normalized and comitted to the publish queue.\n   *\n   * Note: Observables are lazy, so calling this method will do nothing until\n   * the result is subscribed to:\n   * environment.executeWithSource({...}).subscribe({...}).\n   */\n  ;\n\n  _proto.executeWithSource = function executeWithSource(_ref3) {\n    var _this7 = this;\n\n    var operation = _ref3.operation,\n        source = _ref3.source;\n    return RelayObservable.create(function (sink) {\n      var executor = RelayModernQueryExecutor.execute({\n        operation: operation,\n        operationExecutions: _this7._operationExecutions,\n        operationLoader: _this7._operationLoader,\n        operationTracker: _this7._operationTracker,\n        optimisticConfig: null,\n        publishQueue: _this7._publishQueue,\n        scheduler: _this7._scheduler,\n        sink: sink,\n        source: source,\n        store: _this7._store,\n        getDataID: _this7._getDataID\n      });\n      return function () {\n        return executor.cancel();\n      };\n    });\n  };\n\n  _proto.toJSON = function toJSON() {\n    var _this$configName;\n\n    return \"RelayModernEnvironment(\".concat((_this$configName = this.configName) !== null && _this$configName !== void 0 ? _this$configName : '', \")\");\n  };\n\n  _proto.__createLogObserver = function __createLogObserver(params, variables) {\n    var transactionID = generateID();\n    var log = this.__log;\n    var logObserver = {\n      start: function start(subscription) {\n        log({\n          name: 'execute.start',\n          transactionID: transactionID,\n          params: params,\n          variables: variables\n        });\n      },\n      next: function next(response) {\n        log({\n          name: 'execute.next',\n          transactionID: transactionID,\n          response: response\n        });\n      },\n      error: function error(_error) {\n        log({\n          name: 'execute.error',\n          transactionID: transactionID,\n          error: _error\n        });\n      },\n      complete: function complete() {\n        log({\n          name: 'execute.complete',\n          transactionID: transactionID\n        });\n      },\n      unsubscribe: function unsubscribe() {\n        log({\n          name: 'execute.unsubscribe',\n          transactionID: transactionID\n        });\n      }\n    };\n\n    var logRequestInfo = function logRequestInfo(info) {\n      log({\n        name: 'execute.info',\n        transactionID: transactionID,\n        info: info\n      });\n    };\n\n    return [logObserver, logRequestInfo];\n  };\n\n  return RelayModernEnvironment;\n}(); // Add a sigil for detection by `isRelayModernEnvironment()` to avoid a\n// realm-specific instanceof check, and to aid in module tree-shaking to\n// avoid requiring all of RelayRuntime just to detect its environment.\n\n\nRelayModernEnvironment.prototype['@@RelayModernEnvironment'] = true;\n\nfunction emptyFunction() {}\n\nmodule.exports = RelayModernEnvironment;","map":{"version":3,"sources":["/Users/xindi/xindi/graphql-relay-blog/frontend/node_modules/relay-runtime/lib/store/RelayModernEnvironment.js"],"names":["RelayDefaultHandlerProvider","require","RelayFeatureFlags","RelayModernQueryExecutor","RelayObservable","RelayOperationTracker","RelayPublishQueue","RelayRecordSource","defaultGetDataID","generateID","invariant","RelayModernEnvironment","config","_this","_config$log","_config$UNSTABLE_defa","_config$UNSTABLE_DO_N","_config$scheduler","_config$operationTrac","configName","handlerProvider","operationLoader","process","env","NODE_ENV","get","load","__log","log","emptyFunction","_defaultRenderPolicy","UNSTABLE_defaultRenderPolicy","ENABLE_PARTIAL_RENDERING_DEFAULT","_operationLoader","_operationExecutions","Map","_network","network","_getDataID","UNSTABLE_DO_NOT_USE_getDataID","_publishQueue","store","_scheduler","scheduler","_store","options","__setNet","newNet","_require","inspect","DEBUG_inspect","dataID","_global","global","window","undefined","devToolsHook","__RELAY_DEVTOOLS_HOOK__","registerEnvironment","_missingFieldHandlers","missingFieldHandlers","_operationTracker","operationTracker","_proto","prototype","getStore","getNetwork","getOperationTracker","isRequestActive","requestIdentifier","activeState","UNSTABLE_getDefaultRenderPolicy","applyUpdate","optimisticUpdate","_this2","dispose","revertUpdate","run","update","replaceUpdate","newUpdate","applyMutation","optimisticConfig","_this3","subscription","create","sink","source","_sink","executor","execute","operation","operationExecutions","publishQueue","updater","getDataID","cancel","subscribe","unsubscribe","check","length","_checkSelectorAndHandleMissingFields","commitPayload","payload","_this4","from","data","isClientPayload","commitUpdate","lookup","readSelector","snapshot","callback","retain","handlers","target","result","size","commitSource","_ref","_this5","cacheConfig","_this$__createLogObse","__createLogObserver","request","node","params","variables","logObserver","logRequestInfo","executeMutation","_ref2","_this6","optimisticResponse","optimisticUpdater","uploadables","_this$__createLogObse2","response","force","executeWithSource","_ref3","_this7","toJSON","_this$configName","concat","transactionID","start","name","next","error","_error","complete","info","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @emails oncall+relay\n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar RelayDefaultHandlerProvider = require('../handlers/RelayDefaultHandlerProvider');\n\nvar RelayFeatureFlags = require('../util/RelayFeatureFlags');\n\nvar RelayModernQueryExecutor = require('./RelayModernQueryExecutor');\n\nvar RelayObservable = require('../network/RelayObservable');\n\nvar RelayOperationTracker = require('../store/RelayOperationTracker');\n\nvar RelayPublishQueue = require('./RelayPublishQueue');\n\nvar RelayRecordSource = require('./RelayRecordSource');\n\nvar defaultGetDataID = require('./defaultGetDataID');\n\nvar generateID = require('../util/generateID');\n\nvar invariant = require(\"fbjs/lib/invariant\");\n\nvar RelayModernEnvironment =\n/*#__PURE__*/\nfunction () {\n  function RelayModernEnvironment(config) {\n    var _this = this;\n\n    var _config$log, _config$UNSTABLE_defa, _config$UNSTABLE_DO_N, _config$scheduler, _config$operationTrac;\n\n    this.configName = config.configName;\n    var handlerProvider = config.handlerProvider ? config.handlerProvider : RelayDefaultHandlerProvider;\n    var operationLoader = config.operationLoader;\n\n    if (process.env.NODE_ENV !== \"production\") {\n      if (operationLoader != null) {\n        !(typeof operationLoader === 'object' && typeof operationLoader.get === 'function' && typeof operationLoader.load === 'function') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayModernEnvironment: Expected `operationLoader` to be an object ' + 'with get() and load() functions, got `%s`.', operationLoader) : invariant(false) : void 0;\n      }\n    }\n\n    this.__log = (_config$log = config.log) !== null && _config$log !== void 0 ? _config$log : emptyFunction;\n    this._defaultRenderPolicy = ((_config$UNSTABLE_defa = config.UNSTABLE_defaultRenderPolicy) !== null && _config$UNSTABLE_defa !== void 0 ? _config$UNSTABLE_defa : RelayFeatureFlags.ENABLE_PARTIAL_RENDERING_DEFAULT === true) ? 'partial' : 'full';\n    this._operationLoader = operationLoader;\n    this._operationExecutions = new Map();\n    this._network = config.network;\n    this._getDataID = (_config$UNSTABLE_DO_N = config.UNSTABLE_DO_NOT_USE_getDataID) !== null && _config$UNSTABLE_DO_N !== void 0 ? _config$UNSTABLE_DO_N : defaultGetDataID;\n    this._publishQueue = new RelayPublishQueue(config.store, handlerProvider, this._getDataID);\n    this._scheduler = (_config$scheduler = config.scheduler) !== null && _config$scheduler !== void 0 ? _config$scheduler : null;\n    this._store = config.store;\n    this.options = config.options;\n\n    this.__setNet = function (newNet) {\n      return _this._network = newNet;\n    };\n\n    if (process.env.NODE_ENV !== \"production\") {\n      var _require = require('./StoreInspector'),\n          inspect = _require.inspect;\n\n      this.DEBUG_inspect = function (dataID) {\n        return inspect(_this, dataID);\n      };\n    } // Register this Relay Environment with Relay DevTools if it exists.\n    // Note: this must always be the last step in the constructor.\n\n\n    var _global = typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : undefined;\n\n    var devToolsHook = _global && _global.__RELAY_DEVTOOLS_HOOK__;\n\n    if (devToolsHook) {\n      devToolsHook.registerEnvironment(this);\n    }\n\n    this._missingFieldHandlers = config.missingFieldHandlers;\n    this._operationTracker = (_config$operationTrac = config.operationTracker) !== null && _config$operationTrac !== void 0 ? _config$operationTrac : new RelayOperationTracker();\n  }\n\n  var _proto = RelayModernEnvironment.prototype;\n\n  _proto.getStore = function getStore() {\n    return this._store;\n  };\n\n  _proto.getNetwork = function getNetwork() {\n    return this._network;\n  };\n\n  _proto.getOperationTracker = function getOperationTracker() {\n    return this._operationTracker;\n  };\n\n  _proto.isRequestActive = function isRequestActive(requestIdentifier) {\n    var activeState = this._operationExecutions.get(requestIdentifier);\n\n    return activeState === 'active';\n  };\n\n  _proto.UNSTABLE_getDefaultRenderPolicy = function UNSTABLE_getDefaultRenderPolicy() {\n    return this._defaultRenderPolicy;\n  };\n\n  _proto.applyUpdate = function applyUpdate(optimisticUpdate) {\n    var _this2 = this;\n\n    var dispose = function dispose() {\n      _this2._publishQueue.revertUpdate(optimisticUpdate);\n\n      _this2._publishQueue.run();\n    };\n\n    this._publishQueue.applyUpdate(optimisticUpdate);\n\n    this._publishQueue.run();\n\n    return {\n      dispose: dispose\n    };\n  };\n\n  _proto.revertUpdate = function revertUpdate(update) {\n    this._publishQueue.revertUpdate(update);\n\n    this._publishQueue.run();\n  };\n\n  _proto.replaceUpdate = function replaceUpdate(update, newUpdate) {\n    this._publishQueue.revertUpdate(update);\n\n    this._publishQueue.applyUpdate(newUpdate);\n\n    this._publishQueue.run();\n  };\n\n  _proto.applyMutation = function applyMutation(optimisticConfig) {\n    var _this3 = this;\n\n    var subscription = RelayObservable.create(function (sink) {\n      var source = RelayObservable.create(function (_sink) {});\n      var executor = RelayModernQueryExecutor.execute({\n        operation: optimisticConfig.operation,\n        operationExecutions: _this3._operationExecutions,\n        operationLoader: _this3._operationLoader,\n        optimisticConfig: optimisticConfig,\n        publishQueue: _this3._publishQueue,\n        scheduler: _this3._scheduler,\n        sink: sink,\n        source: source,\n        store: _this3._store,\n        updater: null,\n        operationTracker: _this3._operationTracker,\n        getDataID: _this3._getDataID\n      });\n      return function () {\n        return executor.cancel();\n      };\n    }).subscribe({});\n    return {\n      dispose: function dispose() {\n        return subscription.unsubscribe();\n      }\n    };\n  };\n\n  _proto.check = function check(operation) {\n    if (this._missingFieldHandlers == null || this._missingFieldHandlers.length === 0) {\n      return this._store.check(operation);\n    }\n\n    return this._checkSelectorAndHandleMissingFields(operation, this._missingFieldHandlers);\n  };\n\n  _proto.commitPayload = function commitPayload(operation, payload) {\n    var _this4 = this;\n\n    RelayObservable.create(function (sink) {\n      var executor = RelayModernQueryExecutor.execute({\n        operation: operation,\n        operationExecutions: _this4._operationExecutions,\n        operationLoader: _this4._operationLoader,\n        optimisticConfig: null,\n        publishQueue: _this4._publishQueue,\n        scheduler: null,\n        // make sure the first payload is sync\n        sink: sink,\n        source: RelayObservable.from({\n          data: payload\n        }),\n        store: _this4._store,\n        updater: null,\n        operationTracker: _this4._operationTracker,\n        getDataID: _this4._getDataID,\n        isClientPayload: true\n      });\n      return function () {\n        return executor.cancel();\n      };\n    }).subscribe({});\n  };\n\n  _proto.commitUpdate = function commitUpdate(updater) {\n    this._publishQueue.commitUpdate(updater);\n\n    this._publishQueue.run();\n  };\n\n  _proto.lookup = function lookup(readSelector) {\n    return this._store.lookup(readSelector);\n  };\n\n  _proto.subscribe = function subscribe(snapshot, callback) {\n    return this._store.subscribe(snapshot, callback);\n  };\n\n  _proto.retain = function retain(operation) {\n    return this._store.retain(operation);\n  };\n\n  _proto._checkSelectorAndHandleMissingFields = function _checkSelectorAndHandleMissingFields(operation, handlers) {\n    var target = RelayRecordSource.create();\n\n    var result = this._store.check(operation, {\n      target: target,\n      handlers: handlers\n    });\n\n    if (target.size() > 0) {\n      this._publishQueue.commitSource(target);\n\n      this._publishQueue.run();\n    }\n\n    return result;\n  }\n  /**\n   * Returns an Observable of GraphQLResponse resulting from executing the\n   * provided Query or Subscription operation, each result of which is then\n   * normalized and committed to the publish queue.\n   *\n   * Note: Observables are lazy, so calling this method will do nothing until\n   * the result is subscribed to: environment.execute({...}).subscribe({...}).\n   */\n  ;\n\n  _proto.execute = function execute(_ref) {\n    var _this5 = this;\n\n    var operation = _ref.operation,\n        cacheConfig = _ref.cacheConfig,\n        updater = _ref.updater;\n\n    var _this$__createLogObse = this.__createLogObserver(operation.request.node.params, operation.request.variables),\n        logObserver = _this$__createLogObse[0],\n        logRequestInfo = _this$__createLogObse[1];\n\n    return RelayObservable.create(function (sink) {\n      var source = _this5._network.execute(operation.request.node.params, operation.request.variables, cacheConfig || {}, null, logRequestInfo);\n\n      var executor = RelayModernQueryExecutor.execute({\n        operation: operation,\n        operationExecutions: _this5._operationExecutions,\n        operationLoader: _this5._operationLoader,\n        optimisticConfig: null,\n        publishQueue: _this5._publishQueue,\n        scheduler: _this5._scheduler,\n        sink: sink,\n        source: source,\n        store: _this5._store,\n        updater: updater,\n        operationTracker: _this5._operationTracker,\n        getDataID: _this5._getDataID\n      });\n      return function () {\n        return executor.cancel();\n      };\n    })[\"do\"](logObserver);\n  }\n  /**\n   * Returns an Observable of GraphQLResponse resulting from executing the\n   * provided Mutation operation, the result of which is then normalized and\n   * committed to the publish queue along with an optional optimistic response\n   * or updater.\n   *\n   * Note: Observables are lazy, so calling this method will do nothing until\n   * the result is subscribed to:\n   * environment.executeMutation({...}).subscribe({...}).\n   */\n  ;\n\n  _proto.executeMutation = function executeMutation(_ref2) {\n    var _this6 = this;\n\n    var operation = _ref2.operation,\n        optimisticResponse = _ref2.optimisticResponse,\n        optimisticUpdater = _ref2.optimisticUpdater,\n        updater = _ref2.updater,\n        uploadables = _ref2.uploadables;\n\n    var _this$__createLogObse2 = this.__createLogObserver(operation.request.node.params, operation.request.variables),\n        logObserver = _this$__createLogObse2[0],\n        logRequestInfo = _this$__createLogObse2[1];\n\n    return RelayObservable.create(function (sink) {\n      var optimisticConfig;\n\n      if (optimisticResponse || optimisticUpdater) {\n        optimisticConfig = {\n          operation: operation,\n          response: optimisticResponse,\n          updater: optimisticUpdater\n        };\n      }\n\n      var source = _this6._network.execute(operation.request.node.params, operation.request.variables, {\n        force: true\n      }, uploadables, logRequestInfo);\n\n      var executor = RelayModernQueryExecutor.execute({\n        operation: operation,\n        operationExecutions: _this6._operationExecutions,\n        operationLoader: _this6._operationLoader,\n        optimisticConfig: optimisticConfig,\n        publishQueue: _this6._publishQueue,\n        scheduler: _this6._scheduler,\n        sink: sink,\n        source: source,\n        store: _this6._store,\n        updater: updater,\n        operationTracker: _this6._operationTracker,\n        getDataID: _this6._getDataID\n      });\n      return function () {\n        return executor.cancel();\n      };\n    })[\"do\"](logObserver);\n  }\n  /**\n   * Returns an Observable of GraphQLResponse resulting from executing the\n   * provided Query or Subscription operation responses, the result of which is\n   * then normalized and comitted to the publish queue.\n   *\n   * Note: Observables are lazy, so calling this method will do nothing until\n   * the result is subscribed to:\n   * environment.executeWithSource({...}).subscribe({...}).\n   */\n  ;\n\n  _proto.executeWithSource = function executeWithSource(_ref3) {\n    var _this7 = this;\n\n    var operation = _ref3.operation,\n        source = _ref3.source;\n    return RelayObservable.create(function (sink) {\n      var executor = RelayModernQueryExecutor.execute({\n        operation: operation,\n        operationExecutions: _this7._operationExecutions,\n        operationLoader: _this7._operationLoader,\n        operationTracker: _this7._operationTracker,\n        optimisticConfig: null,\n        publishQueue: _this7._publishQueue,\n        scheduler: _this7._scheduler,\n        sink: sink,\n        source: source,\n        store: _this7._store,\n        getDataID: _this7._getDataID\n      });\n      return function () {\n        return executor.cancel();\n      };\n    });\n  };\n\n  _proto.toJSON = function toJSON() {\n    var _this$configName;\n\n    return \"RelayModernEnvironment(\".concat((_this$configName = this.configName) !== null && _this$configName !== void 0 ? _this$configName : '', \")\");\n  };\n\n  _proto.__createLogObserver = function __createLogObserver(params, variables) {\n    var transactionID = generateID();\n    var log = this.__log;\n    var logObserver = {\n      start: function start(subscription) {\n        log({\n          name: 'execute.start',\n          transactionID: transactionID,\n          params: params,\n          variables: variables\n        });\n      },\n      next: function next(response) {\n        log({\n          name: 'execute.next',\n          transactionID: transactionID,\n          response: response\n        });\n      },\n      error: function error(_error) {\n        log({\n          name: 'execute.error',\n          transactionID: transactionID,\n          error: _error\n        });\n      },\n      complete: function complete() {\n        log({\n          name: 'execute.complete',\n          transactionID: transactionID\n        });\n      },\n      unsubscribe: function unsubscribe() {\n        log({\n          name: 'execute.unsubscribe',\n          transactionID: transactionID\n        });\n      }\n    };\n\n    var logRequestInfo = function logRequestInfo(info) {\n      log({\n        name: 'execute.info',\n        transactionID: transactionID,\n        info: info\n      });\n    };\n\n    return [logObserver, logRequestInfo];\n  };\n\n  return RelayModernEnvironment;\n}(); // Add a sigil for detection by `isRelayModernEnvironment()` to avoid a\n// realm-specific instanceof check, and to aid in module tree-shaking to\n// avoid requiring all of RelayRuntime just to detect its environment.\n\n\nRelayModernEnvironment.prototype['@@RelayModernEnvironment'] = true;\n\nfunction emptyFunction() {}\n\nmodule.exports = RelayModernEnvironment;"]},"metadata":{},"sourceType":"script"}