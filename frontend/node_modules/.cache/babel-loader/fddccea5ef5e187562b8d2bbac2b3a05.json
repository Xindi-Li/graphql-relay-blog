{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n * @emails oncall+relay\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar RelayConcreteNode = require('../util/RelayConcreteNode');\n\nvar RelayModernRecord = require('./RelayModernRecord');\n\nvar RelayRecordSourceMutator = require('../mutations/RelayRecordSourceMutator');\n\nvar RelayRecordSourceProxy = require('../mutations/RelayRecordSourceProxy');\n\nvar RelayStoreUtils = require('./RelayStoreUtils');\n\nvar cloneRelayHandleSourceField = require('./cloneRelayHandleSourceField');\n\nvar invariant = require(\"fbjs/lib/invariant\");\n\nvar _require = require('./ClientID'),\n    isClientID = _require.isClientID;\n\nvar _require2 = require('./RelayRecordState'),\n    EXISTENT = _require2.EXISTENT,\n    UNKNOWN = _require2.UNKNOWN;\n\nvar CONDITION = RelayConcreteNode.CONDITION,\n    CLIENT_EXTENSION = RelayConcreteNode.CLIENT_EXTENSION,\n    DEFER = RelayConcreteNode.DEFER,\n    FRAGMENT_SPREAD = RelayConcreteNode.FRAGMENT_SPREAD,\n    INLINE_FRAGMENT = RelayConcreteNode.INLINE_FRAGMENT,\n    LINKED_FIELD = RelayConcreteNode.LINKED_FIELD,\n    LINKED_HANDLE = RelayConcreteNode.LINKED_HANDLE,\n    MODULE_IMPORT = RelayConcreteNode.MODULE_IMPORT,\n    SCALAR_FIELD = RelayConcreteNode.SCALAR_FIELD,\n    SCALAR_HANDLE = RelayConcreteNode.SCALAR_HANDLE,\n    STREAM = RelayConcreteNode.STREAM;\nvar getModuleOperationKey = RelayStoreUtils.getModuleOperationKey,\n    getStorageKey = RelayStoreUtils.getStorageKey,\n    getArgumentValues = RelayStoreUtils.getArgumentValues;\n/**\n * Synchronously check whether the records required to fulfill the given\n * `selector` are present in `source`.\n *\n * If a field is missing, it uses the provided handlers to attempt to substitute\n * data. The `target` will store all records that are modified because of a\n * successful substitution.\n *\n * If all records are present, returns `true`, otherwise `false`.\n */\n\nfunction check(source, target, selector, handlers, operationLoader, getDataID) {\n  var dataID = selector.dataID,\n      node = selector.node,\n      variables = selector.variables;\n  var checker = new DataChecker(source, target, variables, handlers, operationLoader, getDataID);\n  return checker.check(node, dataID);\n}\n/**\n * @private\n */\n\n\nvar DataChecker =\n/*#__PURE__*/\nfunction () {\n  function DataChecker(source, target, variables, handlers, operationLoader, getDataID) {\n    var _operationLoader;\n\n    var mutator = new RelayRecordSourceMutator(source, target);\n    this._mostRecentlyInvalidatedAt = null;\n    this._handlers = handlers;\n    this._mutator = mutator;\n    this._operationLoader = (_operationLoader = operationLoader) !== null && _operationLoader !== void 0 ? _operationLoader : null;\n    this._recordSourceProxy = new RelayRecordSourceProxy(mutator, getDataID);\n    this._recordWasMissing = false;\n    this._source = source;\n    this._variables = variables;\n  }\n\n  var _proto = DataChecker.prototype;\n\n  _proto.check = function check(node, dataID) {\n    this._traverse(node, dataID);\n\n    return this._recordWasMissing === true ? {\n      status: 'missing',\n      mostRecentlyInvalidatedAt: this._mostRecentlyInvalidatedAt\n    } : {\n      status: 'available',\n      mostRecentlyInvalidatedAt: this._mostRecentlyInvalidatedAt\n    };\n  };\n\n  _proto._getVariableValue = function _getVariableValue(name) {\n    !this._variables.hasOwnProperty(name) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayAsyncLoader(): Undefined variable `%s`.', name) : invariant(false) : void 0;\n    return this._variables[name];\n  };\n\n  _proto._handleMissing = function _handleMissing() {\n    this._recordWasMissing = true;\n  };\n\n  _proto._getDataForHandlers = function _getDataForHandlers(field, dataID) {\n    return {\n      args: field.args ? getArgumentValues(field.args, this._variables) : {},\n      // Getting a snapshot of the record state is potentially expensive since\n      // we will need to merge the sink and source records. Since we do not create\n      // any new records in this process, it is probably reasonable to provide\n      // handlers with a copy of the source record.\n      // The only thing that the provided record will not contain is fields\n      // added by previous handlers.\n      record: this._source.get(dataID)\n    };\n  };\n\n  _proto._handleMissingScalarField = function _handleMissingScalarField(field, dataID) {\n    if (field.name === 'id' && field.alias == null && isClientID(dataID)) {\n      return undefined;\n    }\n\n    var _this$_getDataForHand = this._getDataForHandlers(field, dataID),\n        args = _this$_getDataForHand.args,\n        record = _this$_getDataForHand.record;\n\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = this._handlers[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var handler = _step.value;\n\n        if (handler.kind === 'scalar') {\n          var newValue = handler.handle(field, record, args, this._recordSourceProxy);\n\n          if (newValue !== undefined) {\n            return newValue;\n          }\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n          _iterator[\"return\"]();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    this._handleMissing();\n  };\n\n  _proto._handleMissingLinkField = function _handleMissingLinkField(field, dataID) {\n    var _this$_getDataForHand2 = this._getDataForHandlers(field, dataID),\n        args = _this$_getDataForHand2.args,\n        record = _this$_getDataForHand2.record;\n\n    var _iteratorNormalCompletion2 = true;\n    var _didIteratorError2 = false;\n    var _iteratorError2 = undefined;\n\n    try {\n      for (var _iterator2 = this._handlers[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n        var handler = _step2.value;\n\n        if (handler.kind === 'linked') {\n          var newValue = handler.handle(field, record, args, this._recordSourceProxy);\n\n          if (newValue != null && this._mutator.getStatus(newValue) === EXISTENT) {\n            return newValue;\n          }\n        }\n      }\n    } catch (err) {\n      _didIteratorError2 = true;\n      _iteratorError2 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion2 && _iterator2[\"return\"] != null) {\n          _iterator2[\"return\"]();\n        }\n      } finally {\n        if (_didIteratorError2) {\n          throw _iteratorError2;\n        }\n      }\n    }\n\n    this._handleMissing();\n  };\n\n  _proto._handleMissingPluralLinkField = function _handleMissingPluralLinkField(field, dataID) {\n    var _this = this;\n\n    var _this$_getDataForHand3 = this._getDataForHandlers(field, dataID),\n        args = _this$_getDataForHand3.args,\n        record = _this$_getDataForHand3.record;\n\n    var _iteratorNormalCompletion3 = true;\n    var _didIteratorError3 = false;\n    var _iteratorError3 = undefined;\n\n    try {\n      for (var _iterator3 = this._handlers[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n        var handler = _step3.value;\n\n        if (handler.kind === 'pluralLinked') {\n          var newValue = handler.handle(field, record, args, this._recordSourceProxy);\n\n          if (newValue != null) {\n            var allItemsKnown = newValue.every(function (linkedID) {\n              return linkedID != null && _this._mutator.getStatus(linkedID) === EXISTENT;\n            });\n\n            if (allItemsKnown) {\n              return newValue;\n            }\n          }\n        }\n      }\n    } catch (err) {\n      _didIteratorError3 = true;\n      _iteratorError3 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion3 && _iterator3[\"return\"] != null) {\n          _iterator3[\"return\"]();\n        }\n      } finally {\n        if (_didIteratorError3) {\n          throw _iteratorError3;\n        }\n      }\n    }\n\n    this._handleMissing();\n  };\n\n  _proto._traverse = function _traverse(node, dataID) {\n    var status = this._mutator.getStatus(dataID);\n\n    if (status === UNKNOWN) {\n      this._handleMissing();\n    }\n\n    if (status === EXISTENT) {\n      var record = this._source.get(dataID);\n\n      var invalidatedAt = RelayModernRecord.getInvalidationEpoch(record);\n\n      if (invalidatedAt != null) {\n        this._mostRecentlyInvalidatedAt = this._mostRecentlyInvalidatedAt != null ? Math.max(this._mostRecentlyInvalidatedAt, invalidatedAt) : invalidatedAt;\n      }\n\n      this._traverseSelections(node.selections, dataID);\n    }\n  };\n\n  _proto._traverseSelections = function _traverseSelections(selections, dataID) {\n    var _this2 = this;\n\n    selections.forEach(function (selection) {\n      switch (selection.kind) {\n        case SCALAR_FIELD:\n          _this2._checkScalar(selection, dataID);\n\n          break;\n\n        case LINKED_FIELD:\n          if (selection.plural) {\n            _this2._checkPluralLink(selection, dataID);\n          } else {\n            _this2._checkLink(selection, dataID);\n          }\n\n          break;\n\n        case CONDITION:\n          var conditionValue = _this2._getVariableValue(selection.condition);\n\n          if (conditionValue === selection.passingValue) {\n            _this2._traverseSelections(selection.selections, dataID);\n          }\n\n          break;\n\n        case INLINE_FRAGMENT:\n          var typeName = _this2._mutator.getType(dataID);\n\n          if (typeName != null && typeName === selection.type) {\n            _this2._traverseSelections(selection.selections, dataID);\n          }\n\n          break;\n\n        case LINKED_HANDLE:\n          // Handles have no selections themselves; traverse the original field\n          // where the handle was set-up instead.\n          var handleField = cloneRelayHandleSourceField(selection, selections, _this2._variables);\n\n          if (handleField.plural) {\n            _this2._checkPluralLink(handleField, dataID);\n          } else {\n            _this2._checkLink(handleField, dataID);\n          }\n\n          break;\n\n        case MODULE_IMPORT:\n          _this2._checkModuleImport(selection, dataID);\n\n          break;\n\n        case DEFER:\n        case STREAM:\n          _this2._traverseSelections(selection.selections, dataID);\n\n          break;\n\n        case SCALAR_HANDLE:\n        case FRAGMENT_SPREAD:\n          !false ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayAsyncLoader(): Unexpected ast kind `%s`.', selection.kind) : invariant(false) : void 0; // $FlowExpectedError - we need the break; for OSS linter\n\n          break;\n\n        case CLIENT_EXTENSION:\n          var recordWasMissing = _this2._recordWasMissing;\n\n          _this2._traverseSelections(selection.selections, dataID);\n\n          _this2._recordWasMissing = recordWasMissing;\n          break;\n\n        default:\n          selection;\n          !false ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayAsyncLoader(): Unexpected ast kind `%s`.', selection.kind) : invariant(false) : void 0;\n      }\n    });\n  };\n\n  _proto._checkModuleImport = function _checkModuleImport(moduleImport, dataID) {\n    var operationLoader = this._operationLoader;\n    !(operationLoader !== null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'DataChecker: Expected an operationLoader to be configured when using `@module`.') : invariant(false) : void 0;\n    var operationKey = getModuleOperationKey(moduleImport.documentName);\n\n    var operationReference = this._mutator.getValue(dataID, operationKey);\n\n    if (operationReference == null) {\n      if (operationReference === undefined) {\n        this._handleMissing();\n      }\n\n      return;\n    }\n\n    var operation = operationLoader.get(operationReference);\n\n    if (operation != null) {\n      this._traverse(operation, dataID);\n    } else {\n      // If the fragment is not available, we assume that the data cannot have been\n      // processed yet and must therefore be missing.\n      this._handleMissing();\n    }\n  };\n\n  _proto._checkScalar = function _checkScalar(field, dataID) {\n    var storageKey = getStorageKey(field, this._variables);\n\n    var fieldValue = this._mutator.getValue(dataID, storageKey);\n\n    if (fieldValue === undefined) {\n      fieldValue = this._handleMissingScalarField(field, dataID);\n\n      if (fieldValue !== undefined) {\n        this._mutator.setValue(dataID, storageKey, fieldValue);\n      }\n    }\n  };\n\n  _proto._checkLink = function _checkLink(field, dataID) {\n    var storageKey = getStorageKey(field, this._variables);\n\n    var linkedID = this._mutator.getLinkedRecordID(dataID, storageKey);\n\n    if (linkedID === undefined) {\n      linkedID = this._handleMissingLinkField(field, dataID);\n\n      if (linkedID != null) {\n        this._mutator.setLinkedRecordID(dataID, storageKey, linkedID);\n      }\n    }\n\n    if (linkedID != null) {\n      this._traverse(field, linkedID);\n    }\n  };\n\n  _proto._checkPluralLink = function _checkPluralLink(field, dataID) {\n    var _this3 = this;\n\n    var storageKey = getStorageKey(field, this._variables);\n\n    var linkedIDs = this._mutator.getLinkedRecordIDs(dataID, storageKey);\n\n    if (linkedIDs === undefined) {\n      linkedIDs = this._handleMissingPluralLinkField(field, dataID);\n\n      if (linkedIDs != null) {\n        this._mutator.setLinkedRecordIDs(dataID, storageKey, linkedIDs);\n      }\n    }\n\n    if (linkedIDs) {\n      linkedIDs.forEach(function (linkedID) {\n        if (linkedID != null) {\n          _this3._traverse(field, linkedID);\n        }\n      });\n    }\n  };\n\n  return DataChecker;\n}();\n\nmodule.exports = {\n  check: check\n};","map":{"version":3,"sources":["/Users/xindi/xindi/relay-tutorial/node_modules/relay-runtime/lib/store/DataChecker.js"],"names":["RelayConcreteNode","require","RelayModernRecord","RelayRecordSourceMutator","RelayRecordSourceProxy","RelayStoreUtils","cloneRelayHandleSourceField","invariant","_require","isClientID","_require2","EXISTENT","UNKNOWN","CONDITION","CLIENT_EXTENSION","DEFER","FRAGMENT_SPREAD","INLINE_FRAGMENT","LINKED_FIELD","LINKED_HANDLE","MODULE_IMPORT","SCALAR_FIELD","SCALAR_HANDLE","STREAM","getModuleOperationKey","getStorageKey","getArgumentValues","check","source","target","selector","handlers","operationLoader","getDataID","dataID","node","variables","checker","DataChecker","_operationLoader","mutator","_mostRecentlyInvalidatedAt","_handlers","_mutator","_recordSourceProxy","_recordWasMissing","_source","_variables","_proto","prototype","_traverse","status","mostRecentlyInvalidatedAt","_getVariableValue","name","hasOwnProperty","process","env","NODE_ENV","_handleMissing","_getDataForHandlers","field","args","record","get","_handleMissingScalarField","alias","undefined","_this$_getDataForHand","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","Symbol","iterator","_step","next","done","handler","value","kind","newValue","handle","err","_handleMissingLinkField","_this$_getDataForHand2","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","getStatus","_handleMissingPluralLinkField","_this","_this$_getDataForHand3","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_iterator3","_step3","allItemsKnown","every","linkedID","invalidatedAt","getInvalidationEpoch","Math","max","_traverseSelections","selections","_this2","forEach","selection","_checkScalar","plural","_checkPluralLink","_checkLink","conditionValue","condition","passingValue","typeName","getType","type","handleField","_checkModuleImport","recordWasMissing","moduleImport","operationKey","documentName","operationReference","getValue","operation","storageKey","fieldValue","setValue","getLinkedRecordID","setLinkedRecordID","_this3","linkedIDs","getLinkedRecordIDs","setLinkedRecordIDs","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n * @emails oncall+relay\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar RelayConcreteNode = require('../util/RelayConcreteNode');\n\nvar RelayModernRecord = require('./RelayModernRecord');\n\nvar RelayRecordSourceMutator = require('../mutations/RelayRecordSourceMutator');\n\nvar RelayRecordSourceProxy = require('../mutations/RelayRecordSourceProxy');\n\nvar RelayStoreUtils = require('./RelayStoreUtils');\n\nvar cloneRelayHandleSourceField = require('./cloneRelayHandleSourceField');\n\nvar invariant = require(\"fbjs/lib/invariant\");\n\nvar _require = require('./ClientID'),\n    isClientID = _require.isClientID;\n\nvar _require2 = require('./RelayRecordState'),\n    EXISTENT = _require2.EXISTENT,\n    UNKNOWN = _require2.UNKNOWN;\n\nvar CONDITION = RelayConcreteNode.CONDITION,\n    CLIENT_EXTENSION = RelayConcreteNode.CLIENT_EXTENSION,\n    DEFER = RelayConcreteNode.DEFER,\n    FRAGMENT_SPREAD = RelayConcreteNode.FRAGMENT_SPREAD,\n    INLINE_FRAGMENT = RelayConcreteNode.INLINE_FRAGMENT,\n    LINKED_FIELD = RelayConcreteNode.LINKED_FIELD,\n    LINKED_HANDLE = RelayConcreteNode.LINKED_HANDLE,\n    MODULE_IMPORT = RelayConcreteNode.MODULE_IMPORT,\n    SCALAR_FIELD = RelayConcreteNode.SCALAR_FIELD,\n    SCALAR_HANDLE = RelayConcreteNode.SCALAR_HANDLE,\n    STREAM = RelayConcreteNode.STREAM;\nvar getModuleOperationKey = RelayStoreUtils.getModuleOperationKey,\n    getStorageKey = RelayStoreUtils.getStorageKey,\n    getArgumentValues = RelayStoreUtils.getArgumentValues;\n/**\n * Synchronously check whether the records required to fulfill the given\n * `selector` are present in `source`.\n *\n * If a field is missing, it uses the provided handlers to attempt to substitute\n * data. The `target` will store all records that are modified because of a\n * successful substitution.\n *\n * If all records are present, returns `true`, otherwise `false`.\n */\n\nfunction check(source, target, selector, handlers, operationLoader, getDataID) {\n  var dataID = selector.dataID,\n      node = selector.node,\n      variables = selector.variables;\n  var checker = new DataChecker(source, target, variables, handlers, operationLoader, getDataID);\n  return checker.check(node, dataID);\n}\n/**\n * @private\n */\n\n\nvar DataChecker =\n/*#__PURE__*/\nfunction () {\n  function DataChecker(source, target, variables, handlers, operationLoader, getDataID) {\n    var _operationLoader;\n\n    var mutator = new RelayRecordSourceMutator(source, target);\n    this._mostRecentlyInvalidatedAt = null;\n    this._handlers = handlers;\n    this._mutator = mutator;\n    this._operationLoader = (_operationLoader = operationLoader) !== null && _operationLoader !== void 0 ? _operationLoader : null;\n    this._recordSourceProxy = new RelayRecordSourceProxy(mutator, getDataID);\n    this._recordWasMissing = false;\n    this._source = source;\n    this._variables = variables;\n  }\n\n  var _proto = DataChecker.prototype;\n\n  _proto.check = function check(node, dataID) {\n    this._traverse(node, dataID);\n\n    return this._recordWasMissing === true ? {\n      status: 'missing',\n      mostRecentlyInvalidatedAt: this._mostRecentlyInvalidatedAt\n    } : {\n      status: 'available',\n      mostRecentlyInvalidatedAt: this._mostRecentlyInvalidatedAt\n    };\n  };\n\n  _proto._getVariableValue = function _getVariableValue(name) {\n    !this._variables.hasOwnProperty(name) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayAsyncLoader(): Undefined variable `%s`.', name) : invariant(false) : void 0;\n    return this._variables[name];\n  };\n\n  _proto._handleMissing = function _handleMissing() {\n    this._recordWasMissing = true;\n  };\n\n  _proto._getDataForHandlers = function _getDataForHandlers(field, dataID) {\n    return {\n      args: field.args ? getArgumentValues(field.args, this._variables) : {},\n      // Getting a snapshot of the record state is potentially expensive since\n      // we will need to merge the sink and source records. Since we do not create\n      // any new records in this process, it is probably reasonable to provide\n      // handlers with a copy of the source record.\n      // The only thing that the provided record will not contain is fields\n      // added by previous handlers.\n      record: this._source.get(dataID)\n    };\n  };\n\n  _proto._handleMissingScalarField = function _handleMissingScalarField(field, dataID) {\n    if (field.name === 'id' && field.alias == null && isClientID(dataID)) {\n      return undefined;\n    }\n\n    var _this$_getDataForHand = this._getDataForHandlers(field, dataID),\n        args = _this$_getDataForHand.args,\n        record = _this$_getDataForHand.record;\n\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = this._handlers[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var handler = _step.value;\n\n        if (handler.kind === 'scalar') {\n          var newValue = handler.handle(field, record, args, this._recordSourceProxy);\n\n          if (newValue !== undefined) {\n            return newValue;\n          }\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n          _iterator[\"return\"]();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    this._handleMissing();\n  };\n\n  _proto._handleMissingLinkField = function _handleMissingLinkField(field, dataID) {\n    var _this$_getDataForHand2 = this._getDataForHandlers(field, dataID),\n        args = _this$_getDataForHand2.args,\n        record = _this$_getDataForHand2.record;\n\n    var _iteratorNormalCompletion2 = true;\n    var _didIteratorError2 = false;\n    var _iteratorError2 = undefined;\n\n    try {\n      for (var _iterator2 = this._handlers[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n        var handler = _step2.value;\n\n        if (handler.kind === 'linked') {\n          var newValue = handler.handle(field, record, args, this._recordSourceProxy);\n\n          if (newValue != null && this._mutator.getStatus(newValue) === EXISTENT) {\n            return newValue;\n          }\n        }\n      }\n    } catch (err) {\n      _didIteratorError2 = true;\n      _iteratorError2 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion2 && _iterator2[\"return\"] != null) {\n          _iterator2[\"return\"]();\n        }\n      } finally {\n        if (_didIteratorError2) {\n          throw _iteratorError2;\n        }\n      }\n    }\n\n    this._handleMissing();\n  };\n\n  _proto._handleMissingPluralLinkField = function _handleMissingPluralLinkField(field, dataID) {\n    var _this = this;\n\n    var _this$_getDataForHand3 = this._getDataForHandlers(field, dataID),\n        args = _this$_getDataForHand3.args,\n        record = _this$_getDataForHand3.record;\n\n    var _iteratorNormalCompletion3 = true;\n    var _didIteratorError3 = false;\n    var _iteratorError3 = undefined;\n\n    try {\n      for (var _iterator3 = this._handlers[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n        var handler = _step3.value;\n\n        if (handler.kind === 'pluralLinked') {\n          var newValue = handler.handle(field, record, args, this._recordSourceProxy);\n\n          if (newValue != null) {\n            var allItemsKnown = newValue.every(function (linkedID) {\n              return linkedID != null && _this._mutator.getStatus(linkedID) === EXISTENT;\n            });\n\n            if (allItemsKnown) {\n              return newValue;\n            }\n          }\n        }\n      }\n    } catch (err) {\n      _didIteratorError3 = true;\n      _iteratorError3 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion3 && _iterator3[\"return\"] != null) {\n          _iterator3[\"return\"]();\n        }\n      } finally {\n        if (_didIteratorError3) {\n          throw _iteratorError3;\n        }\n      }\n    }\n\n    this._handleMissing();\n  };\n\n  _proto._traverse = function _traverse(node, dataID) {\n    var status = this._mutator.getStatus(dataID);\n\n    if (status === UNKNOWN) {\n      this._handleMissing();\n    }\n\n    if (status === EXISTENT) {\n      var record = this._source.get(dataID);\n\n      var invalidatedAt = RelayModernRecord.getInvalidationEpoch(record);\n\n      if (invalidatedAt != null) {\n        this._mostRecentlyInvalidatedAt = this._mostRecentlyInvalidatedAt != null ? Math.max(this._mostRecentlyInvalidatedAt, invalidatedAt) : invalidatedAt;\n      }\n\n      this._traverseSelections(node.selections, dataID);\n    }\n  };\n\n  _proto._traverseSelections = function _traverseSelections(selections, dataID) {\n    var _this2 = this;\n\n    selections.forEach(function (selection) {\n      switch (selection.kind) {\n        case SCALAR_FIELD:\n          _this2._checkScalar(selection, dataID);\n\n          break;\n\n        case LINKED_FIELD:\n          if (selection.plural) {\n            _this2._checkPluralLink(selection, dataID);\n          } else {\n            _this2._checkLink(selection, dataID);\n          }\n\n          break;\n\n        case CONDITION:\n          var conditionValue = _this2._getVariableValue(selection.condition);\n\n          if (conditionValue === selection.passingValue) {\n            _this2._traverseSelections(selection.selections, dataID);\n          }\n\n          break;\n\n        case INLINE_FRAGMENT:\n          var typeName = _this2._mutator.getType(dataID);\n\n          if (typeName != null && typeName === selection.type) {\n            _this2._traverseSelections(selection.selections, dataID);\n          }\n\n          break;\n\n        case LINKED_HANDLE:\n          // Handles have no selections themselves; traverse the original field\n          // where the handle was set-up instead.\n          var handleField = cloneRelayHandleSourceField(selection, selections, _this2._variables);\n\n          if (handleField.plural) {\n            _this2._checkPluralLink(handleField, dataID);\n          } else {\n            _this2._checkLink(handleField, dataID);\n          }\n\n          break;\n\n        case MODULE_IMPORT:\n          _this2._checkModuleImport(selection, dataID);\n\n          break;\n\n        case DEFER:\n        case STREAM:\n          _this2._traverseSelections(selection.selections, dataID);\n\n          break;\n\n        case SCALAR_HANDLE:\n        case FRAGMENT_SPREAD:\n          !false ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayAsyncLoader(): Unexpected ast kind `%s`.', selection.kind) : invariant(false) : void 0; // $FlowExpectedError - we need the break; for OSS linter\n\n          break;\n\n        case CLIENT_EXTENSION:\n          var recordWasMissing = _this2._recordWasMissing;\n\n          _this2._traverseSelections(selection.selections, dataID);\n\n          _this2._recordWasMissing = recordWasMissing;\n          break;\n\n        default:\n          selection;\n          !false ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayAsyncLoader(): Unexpected ast kind `%s`.', selection.kind) : invariant(false) : void 0;\n      }\n    });\n  };\n\n  _proto._checkModuleImport = function _checkModuleImport(moduleImport, dataID) {\n    var operationLoader = this._operationLoader;\n    !(operationLoader !== null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'DataChecker: Expected an operationLoader to be configured when using `@module`.') : invariant(false) : void 0;\n    var operationKey = getModuleOperationKey(moduleImport.documentName);\n\n    var operationReference = this._mutator.getValue(dataID, operationKey);\n\n    if (operationReference == null) {\n      if (operationReference === undefined) {\n        this._handleMissing();\n      }\n\n      return;\n    }\n\n    var operation = operationLoader.get(operationReference);\n\n    if (operation != null) {\n      this._traverse(operation, dataID);\n    } else {\n      // If the fragment is not available, we assume that the data cannot have been\n      // processed yet and must therefore be missing.\n      this._handleMissing();\n    }\n  };\n\n  _proto._checkScalar = function _checkScalar(field, dataID) {\n    var storageKey = getStorageKey(field, this._variables);\n\n    var fieldValue = this._mutator.getValue(dataID, storageKey);\n\n    if (fieldValue === undefined) {\n      fieldValue = this._handleMissingScalarField(field, dataID);\n\n      if (fieldValue !== undefined) {\n        this._mutator.setValue(dataID, storageKey, fieldValue);\n      }\n    }\n  };\n\n  _proto._checkLink = function _checkLink(field, dataID) {\n    var storageKey = getStorageKey(field, this._variables);\n\n    var linkedID = this._mutator.getLinkedRecordID(dataID, storageKey);\n\n    if (linkedID === undefined) {\n      linkedID = this._handleMissingLinkField(field, dataID);\n\n      if (linkedID != null) {\n        this._mutator.setLinkedRecordID(dataID, storageKey, linkedID);\n      }\n    }\n\n    if (linkedID != null) {\n      this._traverse(field, linkedID);\n    }\n  };\n\n  _proto._checkPluralLink = function _checkPluralLink(field, dataID) {\n    var _this3 = this;\n\n    var storageKey = getStorageKey(field, this._variables);\n\n    var linkedIDs = this._mutator.getLinkedRecordIDs(dataID, storageKey);\n\n    if (linkedIDs === undefined) {\n      linkedIDs = this._handleMissingPluralLinkField(field, dataID);\n\n      if (linkedIDs != null) {\n        this._mutator.setLinkedRecordIDs(dataID, storageKey, linkedIDs);\n      }\n    }\n\n    if (linkedIDs) {\n      linkedIDs.forEach(function (linkedID) {\n        if (linkedID != null) {\n          _this3._traverse(field, linkedID);\n        }\n      });\n    }\n  };\n\n  return DataChecker;\n}();\n\nmodule.exports = {\n  check: check\n};"]},"metadata":{},"sourceType":"script"}